{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"C:/Users/DELL/Desktop/Cu/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createContext, useState, useEffect } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nvar OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      order = _useState[0],\n      setOrder = _useState[1];\n\n  var getOrder = function getOrder() {\n    try {\n      return JSON.parse(localStorage.getItem('order')) || [];\n    } catch (error) {}\n\n    return [];\n  };\n\n  useEffect(function () {\n    var o = getOrder();\n    setOrder(o);\n  }, []);\n  useEffect(function () {\n    saveOrder(order);\n  }, [order]);\n\n  var saveOrder = function saveOrder(order) {\n    localStorage.setItem('order', JSON.stringify(order));\n  };\n\n  var addProductToBag = function addProductToBag(variantQuantity, product) {\n    var activeOrder = _toConsumableArray(order); //: if the product and variant is already there\n\n\n    var indexOfOrderItem = activeOrder.findIndex(function (orderItem) {\n      return orderItem.variant.id === product.variant.id;\n    });\n\n    if (indexOfOrderItem !== -1) {\n      //: update quantity\n      var currentQuantity = activeOrder[indexOfOrderItem].quantity;\n\n      if (currentQuantity + variantQuantity <= product.variant.stock) {\n        activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\n      }\n    } else {\n      activeOrder.push({\n        product: product.product,\n        variant: product.variant,\n        quantity: variantQuantity,\n        offers: product.offers\n      });\n    }\n\n    setOrder(activeOrder);\n  };\n\n  var removeProduct = function removeProduct(itemNumber) {\n    var activeOrder = _toConsumableArray(order);\n\n    activeOrder.splice(itemNumber, 1);\n    setOrder(activeOrder);\n  };\n\n  return /*#__PURE__*/_jsx(OrderContext.Provider, {\n    value: {\n      order: order,\n      addProductToBag: addProductToBag,\n      removeProduct: removeProduct,\n      setOrder: setOrder\n    },\n    children: children\n  });\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}