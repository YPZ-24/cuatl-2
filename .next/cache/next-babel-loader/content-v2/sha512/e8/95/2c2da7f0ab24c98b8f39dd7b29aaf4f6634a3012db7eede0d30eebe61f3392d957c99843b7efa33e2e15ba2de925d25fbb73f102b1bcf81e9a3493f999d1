{"ast":null,"code":"import { useEffect, useState } from \"react\";\n; //: use this custom hook to get the viewport size of the screen in order to\n//: execute some code base on screen size\n\nconst useViewport = () => {\n  const {\n    0: viewportSize,\n    1: setViewportSize\n  } = useState({\n    height: 0,\n    width: 0\n  });\n  useEffect(() => {\n    if (window) {\n      const refreshViewportSize = () => setViewportSize({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n\n      refreshViewportSize();\n      window.addEventListener('resize', refreshViewportSize);\n      return () => window.removeEventListener('resize', refreshViewportSize);\n    }\n  }, []);\n  return viewportSize;\n};\n\nexport default useViewport;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/utils/use-viewport.ts"],"names":["useEffect","useState","useViewport","viewportSize","setViewportSize","height","width","window","refreshViewportSize","innerHeight","innerWidth","addEventListener","removeEventListener"],"mappings":"AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAKC,C,CAED;AACA;;AACA,MAAMC,WAAW,GAAG,MAAiB;AACnC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCH,QAAQ,CAAY;AAC1DI,IAAAA,MAAM,EAAE,CADkD;AAC/CC,IAAAA,KAAK,EAAE;AADwC,GAAZ,CAAhD;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAJ,EAAY;AACV,YAAMC,mBAAmB,GAAG,MAAYJ,eAAe,CAAC;AACtDC,QAAAA,MAAM,EAAEE,MAAM,CAACE,WADuC;AAC1BH,QAAAA,KAAK,EAAEC,MAAM,CAACG;AADY,OAAD,CAAvD;;AAIAF,MAAAA,mBAAmB;AACnBD,MAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCH,mBAAlC;AAEA,aAAO,MAAMD,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCJ,mBAArC,CAAb;AACD;AACF,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAOL,YAAP;AACD,CAnBD;;AAqBA,eAAeD,WAAf","sourcesContent":["import { type } from \"os\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface IViewport {\r\n  height: number;\r\n  width: number;\r\n};\r\n\r\n//: use this custom hook to get the viewport size of the screen in order to\r\n//: execute some code base on screen size\r\nconst useViewport = (): IViewport => {\r\n  const [viewportSize, setViewportSize] = useState<IViewport>({\r\n    height: 0, width: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (window) {\r\n      const refreshViewportSize = (): void => setViewportSize({\r\n        height: window.innerHeight, width: window.innerWidth\r\n      });\r\n\r\n      refreshViewportSize();\r\n      window.addEventListener('resize', refreshViewportSize);\r\n\r\n      return () => window.removeEventListener('resize', refreshViewportSize);\r\n    }\r\n  }, []);\r\n\r\n  return viewportSize;\r\n};\r\n\r\nexport default useViewport;\r\n"]},"metadata":{},"sourceType":"module"}