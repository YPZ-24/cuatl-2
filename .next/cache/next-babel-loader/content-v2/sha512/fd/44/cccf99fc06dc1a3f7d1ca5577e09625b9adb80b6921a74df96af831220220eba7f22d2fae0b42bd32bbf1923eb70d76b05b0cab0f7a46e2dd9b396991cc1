{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\context\\\\AuthContext.tsx\";\nimport { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\nimport { getSession } from '@/actions/fetch-sessions';\n//: use this context wherever you want to access the AuthProvider\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport default AuthContext;\nexport { AuthProvider }; //: use this component in the _app.tsx file to share the authentication state\n//: globally\n\nfunction AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const router = useRouter();\n\n  const login = async () => {\n    console.log(\"Aqui\");\n    console.log(router.query);\n\n    if ('id_token' in router.query || 'access_token' in router.query) {\n      const session = await getSession(location.search);\n      router.replace('/');\n      sessionStorage.setItem('session', JSON.stringify(session));\n      setUser(session.user);\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  const getSessionStorage = () => {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  const getToken = () => {\n    return getSessionStorage().token;\n  }; //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n\n\n  const useSession = () => {\n    useEffect(() => {\n      const session = getSessionStorage();\n      setUser(session === null || session === void 0 ? void 0 : session.user);\n    }, []);\n  };\n\n  const isUserLoggedIn = () => {\n    return getSessionStorage() ? true : false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      getToken,\n      isUserLoggedIn,\n      useSession\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/context/AuthContext.tsx"],"names":["useRouter","createContext","useEffect","useState","getSession","AuthContext","AuthProvider","children","user","setUser","router","login","console","log","query","session","location","search","replace","sessionStorage","setItem","JSON","stringify","logout","removeItem","push","getSessionStorage","parse","getItem","_error","error","message","getToken","token","useSession","isUserLoggedIn"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAIA;AACA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,IAAD,CAAjC;AAEA,eAAeI,WAAf;AACA,SAASC,YAAT,G,CAEA;AACA;;AACA,SAASA,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAQ,IAAR,CAAhC;AACA,QAAMO,MAAM,GAAGV,SAAS,EAAxB;;AAEA,QAAMW,KAAK,GAAG,YAA2B;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,KAAnB;;AACA,QAAI,cAAcJ,MAAM,CAACI,KAArB,IAA8B,kBAAkBJ,MAAM,CAACI,KAA3D,EAAkE;AAChE,YAAMC,OAAiB,GAAG,MAAMX,UAAU,CAACY,QAAQ,CAACC,MAAV,CAA1C;AAEAP,MAAAA,MAAM,CAACQ,OAAP,CAAe,GAAf;AACAC,MAAAA,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkCC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAlC;AACAN,MAAAA,OAAO,CAACM,OAAO,CAACP,IAAT,CAAP;AACD;AACF,GAVD;;AAYA,QAAMe,MAAM,GAAG,MAAY;AACzBJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,SAA1B;AACAf,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,IAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,MAAuB;AAC/C,QAAI;AACF,aAAOL,IAAI,CAACM,KAAL,CAAWR,cAAc,CAACS,OAAf,CAAuB,SAAvB,CAAX,CAAP;AACD,KAFD,CAEE,OAAOC,MAAP,EAAe;AACfjB,MAAAA,OAAO,CAACkB,KAAR,CAAeD,MAAD,CAAwBE,OAAtC;AACA,aAAO,IAAP;AACD;AACF,GAPD;;AASA,QAAMC,QAAQ,GAAG,MAAqB;AACpC,WAAON,iBAAiB,GAAGO,KAA3B;AACD,GAFD,CA/BkC,CAmClC;AACA;;;AACA,QAAMC,UAAU,GAAG,MAAY;AAC7BhC,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMa,OAAiB,GAAGW,iBAAiB,EAA3C;AAEAjB,MAAAA,OAAO,CAACM,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEP,IAAV,CAAP;AACD,KAJQ,EAIN,EAJM,CAAT;AAKD,GAND;;AAQA,QAAM2B,cAAc,GAAG,MAAe;AACpC,WAAOT,iBAAiB,KAAK,IAAL,GAAY,KAApC;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC3BlB,MAAAA,IAD2B;AACrBG,MAAAA,KADqB;AACdY,MAAAA,MADc;AACNS,MAAAA,QADM;AACIG,MAAAA,cADJ;AACoBD,MAAAA;AADpB,KAA7B;AAAA,cAGG3B;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAAA","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { createContext, useEffect, useState } from 'react';\r\n\r\nimport { getSession } from '@/actions/fetch-sessions';\r\nimport ISession from '@/models/ISession';\r\nimport IUser from '@/models/IUser';\r\n\r\n//: use this context wherever you want to access the AuthProvider\r\nconst AuthContext = createContext(null);\r\n\r\nexport default AuthContext;\r\nexport { AuthProvider };\r\n\r\n//: use this component in the _app.tsx file to share the authentication state\r\n//: globally\r\nfunction AuthProvider({ children }) {\r\n  const [user, setUser] = useState<IUser>(null);\r\n  const router = useRouter();\r\n\r\n  const login = async (): Promise<void> => {\r\n    console.log(\"Aqui\")\r\n    console.log(router.query)\r\n    if ('id_token' in router.query || 'access_token' in router.query) {\r\n      const session: ISession = await getSession(location.search);\r\n\r\n      router.replace('/');\r\n      sessionStorage.setItem('session', JSON.stringify(session));\r\n      setUser(session.user);\r\n    }\r\n  };\r\n\r\n  const logout = (): void => {\r\n    sessionStorage.removeItem('session');\r\n    setUser(null);\r\n    router.push('/');\r\n  };\r\n\r\n  const getSessionStorage = (): ISession | null => {\r\n    try {\r\n      return JSON.parse(sessionStorage.getItem('session'));\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getToken = (): string | null => {\r\n    return getSessionStorage().token;\r\n  };\r\n\r\n  //: use this custom hook to set the local session into the global state each\r\n  //: time a page is refreshed; use it only on page components\r\n  const useSession = (): void => {\r\n    useEffect(() => {\r\n      const session: ISession = getSessionStorage();\r\n\r\n      setUser(session?.user);\r\n    }, []);\r\n  };\r\n\r\n  const isUserLoggedIn = (): boolean => {\r\n    return getSessionStorage() ? true : false;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user, login, logout, getToken, isUserLoggedIn, useSession\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}