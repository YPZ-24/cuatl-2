{"ast":null,"code":"import { gql } from '@apollo/client';\n;\nexport const getProductsPage = async (apolloClient, filter) => {\n  const formatFilters = () => {\n    let formattedFilters = '';\n\n    if (filter.query) {\n      if (filter.query.department) {\n        formattedFilters += `\n          departments: { slug: \"${filter.query.department}\" }\n        `;\n      }\n\n      if (filter.query.category) {\n        formattedFilters += `\n          categories: { slug: \"${filter.query.category}\" }\n        `;\n      }\n\n      if (filter.query.subcategory) {\n        formattedFilters += `\n          subcategories: { slug: \"${filter.query.subcategory}\" }\n        `;\n      }\n    }\n\n    return formattedFilters;\n  };\n\n  const {\n    error,\n    data\n  } = await apolloClient.query({\n    query: gql`\n      query getProductsPage(\n        $where: JSON! = {\n          active: true\n          ${formatFilters()}\n        }\n      ) {\n        products(start: ${filter.start}, limit: ${filter.limit}, where: $where) {\n          id\n          slug\n          name\n          price\n          offers(where: { active: true }) {\n            id\n          }\n          cover {\n            alternativeText\n            url\n          }\n        }\n      }\n    `\n  });\n  return error !== null && error !== void 0 ? error : data.products.filter(product => product !== null);\n};\nexport const getProductBySlug = async (apolloClient, slug) => {\n  const {\n    error,\n    data,\n    loading\n  } = await apolloClient.query({\n    query: gql`\n      query getProduct($where: JSON! = { active: true, slug: \"${slug}\" }) {\n        products(where: $where) {\n          id\n          name\n          description\n          media {\n            mime\n            url\n          }\n          meta_description\n          meta_title\n          offers(where: { active: true }) {\n            id\n            name\n            description\n            discount\n          }\n          price\n          variants(where: {active: true}) {\n            id\n            color\n            pattern\n            size\n            stock\n          }\n        }\n      }\n    `\n  });\n  return error !== null && error !== void 0 ? error : data.products[0];\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/AAAA/cuatl-2/actions/fetch-products.ts"],"names":["gql","getProductsPage","apolloClient","filter","formatFilters","formattedFilters","query","department","category","subcategory","error","data","start","limit","products","product","getProductBySlug","slug","loading"],"mappings":"AAAA,SAAuBA,GAAvB,QAAyD,gBAAzD;AAQC;AAED,OAAO,MAAMC,eAAe,GAAG,OAC7BC,YAD6B,EAE7BC,MAF6B,KAGL;AACxB,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIC,gBAAgB,GAAG,EAAvB;;AAEA,QAAIF,MAAM,CAACG,KAAX,EAAkB;AAChB,UAAIH,MAAM,CAACG,KAAP,CAAaC,UAAjB,EAA6B;AAC3BF,QAAAA,gBAAgB,IAAK;AAC7B,kCAAkCF,MAAM,CAACG,KAAP,CAAaC,UAAW;AAC1D,SAFQ;AAGD;;AAED,UAAIJ,MAAM,CAACG,KAAP,CAAaE,QAAjB,EAA2B;AACzBH,QAAAA,gBAAgB,IAAK;AAC7B,iCAAiCF,MAAM,CAACG,KAAP,CAAaE,QAAS;AACvD,SAFQ;AAGD;;AAED,UAAIL,MAAM,CAACG,KAAP,CAAaG,WAAjB,EAA8B;AAC5BJ,QAAAA,gBAAgB,IAAK;AAC7B,oCAAoCF,MAAM,CAACG,KAAP,CAAaG,WAAY;AAC7D,SAFQ;AAGD;AACF;;AAED,WAAOJ,gBAAP;AACD,GAxBD;;AA0BA,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkB,MAAMT,YAAY,CAACI,KAAb,CAAmB;AAC/CA,IAAAA,KAAK,EAAEN,GAAI;AACf;AACA;AACA;AACA,YAAYI,aAAa,EAAG;AAC5B;AACA;AACA,0BAA0BD,MAAM,CAACS,KAAM,YAAWT,MAAM,CAACU,KAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBmD,GAAnB,CAA9B;AAyBA,SAAOH,KAAP,aAAOA,KAAP,cAAOA,KAAP,GAAgBC,IAAI,CAACG,QAAL,CAAcX,MAAd,CAAsBY,OAAD,IAAuBA,OAAO,KAAK,IAAxD,CAAhB;AACD,CAxDM;AA0DP,OAAO,MAAMC,gBAAgB,GAAG,OAC9Bd,YAD8B,EAE9Be,IAF8B,KAGR;AACtB,QAAM;AAAEP,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeO,IAAAA;AAAf,MAA2B,MAAMhB,YAAY,CAACI,KAAb,CAAmB;AACxDA,IAAAA,KAAK,EAAEN,GAAI;AACf,gEAAgEiB,IAAK;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7B4D,GAAnB,CAAvC;AAgCA,SAAOP,KAAP,aAAOA,KAAP,cAAOA,KAAP,GAAgBC,IAAI,CAACG,QAAL,CAAc,CAAd,CAAhB;AACD,CArCM","sourcesContent":["import { ApolloClient, gql, NormalizedCacheObject } from '@apollo/client';\r\n\r\nimport IProduct from '@/models/IProduct';\r\n\r\ninterface IPageFilter {\r\n  start: number;\r\n  limit: number;\r\n  query?: any\r\n};\r\n\r\nexport const getProductsPage = async (\r\n  apolloClient: ApolloClient<NormalizedCacheObject>,\r\n  filter: IPageFilter\r\n): Promise<IProduct[]> => {\r\n  const formatFilters = () => {\r\n    let formattedFilters = '';\r\n\r\n    if (filter.query) {\r\n      if (filter.query.department) {\r\n        formattedFilters += `\r\n          departments: { slug: \"${filter.query.department}\" }\r\n        `;\r\n      }\r\n\r\n      if (filter.query.category) {\r\n        formattedFilters += `\r\n          categories: { slug: \"${filter.query.category}\" }\r\n        `;\r\n      }\r\n\r\n      if (filter.query.subcategory) {\r\n        formattedFilters += `\r\n          subcategories: { slug: \"${filter.query.subcategory}\" }\r\n        `;\r\n      }\r\n    }\r\n\r\n    return formattedFilters;\r\n  };\r\n\r\n  const { error, data } = await apolloClient.query({\r\n    query: gql`\r\n      query getProductsPage(\r\n        $where: JSON! = {\r\n          active: true\r\n          ${formatFilters()}\r\n        }\r\n      ) {\r\n        products(start: ${filter.start}, limit: ${filter.limit}, where: $where) {\r\n          id\r\n          slug\r\n          name\r\n          price\r\n          offers(where: { active: true }) {\r\n            id\r\n          }\r\n          cover {\r\n            alternativeText\r\n            url\r\n          }\r\n        }\r\n      }\r\n    `\r\n  });\r\n\r\n  return error ?? data.products.filter((product: IProduct) => product !== null);\r\n};\r\n\r\nexport const getProductBySlug = async (\r\n  apolloClient: ApolloClient<NormalizedCacheObject>,\r\n  slug: string\r\n): Promise<IProduct> => {\r\n  const { error, data, loading } = await apolloClient.query({\r\n    query: gql`\r\n      query getProduct($where: JSON! = { active: true, slug: \"${slug}\" }) {\r\n        products(where: $where) {\r\n          id\r\n          name\r\n          description\r\n          media {\r\n            mime\r\n            url\r\n          }\r\n          meta_description\r\n          meta_title\r\n          offers(where: { active: true }) {\r\n            id\r\n            name\r\n            description\r\n            discount\r\n          }\r\n          price\r\n          variants(where: {active: true}) {\r\n            id\r\n            color\r\n            pattern\r\n            size\r\n            stock\r\n          }\r\n        }\r\n      }\r\n    `\r\n  });\r\n\r\n  return error ?? data.products[0];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}