{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\context\\\\OrderContext.tsx\";\nimport { createContext, useState, useEffect } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nconst OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider({\n  children\n}) {\n  const {\n    0: order,\n    1: setOrder\n  } = useState([]);\n\n  const getOrder = () => {\n    try {\n      return JSON.parse(localStorage.getItem('order')) || [];\n    } catch (error) {}\n\n    return [];\n  };\n\n  useEffect(() => {\n    const o = getOrder();\n    setOrder(o);\n  }, []);\n  useEffect(() => {\n    saveOrder(order);\n  }, [order]);\n\n  const saveOrder = order => {\n    localStorage.setItem('order', JSON.stringify(order));\n  };\n\n  const addProductToBag = (variantQuantity, product) => {\n    const activeOrder = [...order]; //: if the product and variant is already there\n\n    const indexOfOrderItem = activeOrder.findIndex(orderItem => orderItem.variant.id === product.variant.id);\n\n    if (indexOfOrderItem !== -1) {\n      //: update quantity\n      const currentQuantity = activeOrder[indexOfOrderItem].quantity;\n\n      if (currentQuantity + variantQuantity <= product.variant.stock) {\n        activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\n      }\n    } else {\n      activeOrder.push({\n        product: product.product,\n        variant: product.variant,\n        quantity: variantQuantity,\n        offers: product.offers\n      });\n    }\n\n    setOrder(activeOrder); //saveOrder(activeOrder)\n  };\n\n  const removeProduct = itemNumber => {\n    const activeOrder = [...order];\n    activeOrder.splice(itemNumber, 1);\n    setOrder(activeOrder); //saveOrder(order)\n  };\n\n  const cleanOrder = () => {\n    console.log(\"LIMPIA\");\n    console.log(order); //const activeOrder = []\n    //setOrder(activeOrder)\n  };\n  /*\r\n    \r\n    const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n    //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n    //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\n\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      order,\n      addProductToBag,\n      removeProduct,\n      cleanOrder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/context/OrderContext.tsx"],"names":["createContext","useState","useEffect","OrderContext","OrderProvider","children","order","setOrder","getOrder","JSON","parse","localStorage","getItem","error","o","saveOrder","setItem","stringify","addProductToBag","variantQuantity","product","activeOrder","indexOfOrderItem","findIndex","orderItem","variant","id","currentQuantity","quantity","stock","push","offers","removeProduct","itemNumber","splice","cleanOrder","console","log"],"mappings":"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","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport IPaymentOrder from \"@/models/IPaymentOrder\";\r\n\r\n//: use this context whenever you want to access the OrderProvider\r\nconst OrderContext = createContext(null);\r\n\r\nexport default OrderContext;\r\n\r\nexport { OrderProvider };\r\n\r\n//: use this component in all the other components where you want to access\r\n//: the global state of a user order\r\nfunction OrderProvider({ children }) {\r\n\r\n  const [order, setOrder] = useState<Array<IPaymentOrder>>([]);\r\n\r\n  const getOrder = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('order')) || [];\r\n    } catch (error) { }\r\n    return [];\r\n  };\r\n\r\n  \r\n  useEffect(()=>{\r\n    const o = getOrder()\r\n    setOrder(o)\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    saveOrder(order)\r\n  },[order])\r\n\r\n  const saveOrder = (order: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('order', JSON.stringify(order));\r\n  };\r\n\r\n  const addProductToBag = (variantQuantity:number, product:IPaymentOrder) => {\r\n    const activeOrder = [...order]\r\n   //: if the product and variant is already there\r\n   const indexOfOrderItem = activeOrder.findIndex((orderItem: IPaymentOrder) => orderItem.variant.id === product.variant.id);\r\n   if (indexOfOrderItem !== -1) {\r\n     //: update quantity\r\n     const currentQuantity = activeOrder[indexOfOrderItem].quantity;\r\n     if (currentQuantity + variantQuantity <= product.variant.stock) {\r\n       activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\r\n     }\r\n   } else {\r\n     activeOrder.push({\r\n       product: product.product,\r\n       variant: product.variant,\r\n       quantity: variantQuantity,\r\n       offers: product.offers\r\n     });\r\n   }\r\n    setOrder(activeOrder);\r\n    //saveOrder(activeOrder)\r\n  };\r\n\r\n  const removeProduct = (itemNumber) => {\r\n      const activeOrder = [...order]\r\n      activeOrder.splice(itemNumber, 1)\r\n      setOrder(activeOrder)\r\n      //saveOrder(order)\r\n  };\r\n\r\n  const cleanOrder = () => {\r\n    console.log(\"LIMPIA\")\r\n    console.log(order)\r\n    //const activeOrder = []\r\n    //setOrder(activeOrder)\r\n  }\r\n\r\n\r\n  /*\r\n\r\n  \r\n\r\n  const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n\r\n  //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n\r\n  //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\r\n\r\n  return (\r\n    <OrderContext.Provider value={{ order, addProductToBag, removeProduct, cleanOrder }}>\r\n      {children}\r\n    </OrderContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}