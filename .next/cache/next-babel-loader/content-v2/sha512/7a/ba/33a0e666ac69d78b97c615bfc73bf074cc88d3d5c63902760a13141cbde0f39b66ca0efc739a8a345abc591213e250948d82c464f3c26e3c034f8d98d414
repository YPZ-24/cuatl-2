{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/DELL/Desktop/A/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/A/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\A\\\\cuatl-2\\\\pages\\\\user\\\\address.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport MyInput from '../../components/inputs/MyInput';\nimport { Container, Typography, Button } from '@material-ui/core';\nimport * as Yup from 'yup';\nimport myFetch from '../../utils/myFetch';\nimport OrderContext from '@/context/OrderContext';\nimport { STRIPE_PUBLISHED_KEY } from '@/config/globals';\nimport { loadStripe } from '@stripe/stripe-js';\nimport MyBackdrop from '../../components/MyBackdrop';\nvar stripePromise = loadStripe(STRIPE_PUBLISHED_KEY);\n\nfunction address() {\n  _s();\n\n  var _useContext = useContext(OrderContext),\n      order = _useContext.order;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setOpen(true);\n              if (!values.noExt) values.noExt = 0;\n              if (!values.noInt) values.noInt = 0;\n              /*\r\n              if(!values.noExt) values.noExt = 0\r\n              const stripe = await stripePromise;\r\n              const address = await myFetch({method: 'POST', path: `/addresses`, body: values})\r\n              const session = await myFetch({method: 'POST', path: '/orders', body: {order, address: address.id}})\r\n              const result = await stripe.redirectToCheckout({\r\n                sessionId: session.id\r\n              });*/\n\n              console.log(values);\n              setOpen(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(MyBackdrop, {\n      open: open\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      children: \"DIRECCI\\xD3N\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        estado: '',\n        delegacion: '',\n        colonia: '',\n        calle: '',\n        noInt: '',\n        noExt: '',\n        cp: ''\n      },\n      onSubmit: function onSubmit(values) {\n        return handleSubmit(values);\n      },\n      validationSchema: Yup.object().shape({\n        estado: Yup.string('Debe ser un texto').required('Debes agregar un estado'),\n        delegacion: Yup.string('Debe ser un texto').required('Debes agregar una delegacion'),\n        colonia: Yup.string('Debe ser un texto').required('Debes agregar una colonia'),\n        calle: Yup.string('Debe ser un texto').required('Debes agregar una calle'),\n        noInt: Yup.number().min(0),\n        noExt: Yup.number('Debe ser un número').min(0),\n        cp: Yup.number('Debe ser un número').min(1, 'Debe ser un C.P. válido').required('Debes agregar un C.P.')\n      }),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"Estado\",\n          name: \"estado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"Delegaci\\xF3n\",\n          name: \"delegacion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"Colonia\",\n          name: \"colonia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"Calle\",\n          name: \"calle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"No. Interior\",\n          name: \"noInt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"No. Exterior\",\n          name: \"noExt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n          label: \"C\\xF3digo Postal\",\n          name: \"cp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"SAVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(address, \"vxGag+Tux3o4b9hsDSnaBCn03fE=\");\n\nexport default address;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/A/cuatl-2/pages/user/address.js"],"names":["React","useContext","useState","Formik","Form","MyInput","Container","Typography","Button","Yup","myFetch","OrderContext","STRIPE_PUBLISHED_KEY","loadStripe","MyBackdrop","stripePromise","address","order","open","setOpen","handleSubmit","values","noExt","noInt","console","log","estado","delegacion","colonia","calle","cp","object","shape","string","required","number","min"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\r\nimport {Formik, Form} from 'formik'\r\nimport MyInput from '../../components/inputs/MyInput'\r\nimport {Container, Typography, Button} from '@material-ui/core'\r\nimport * as Yup from 'yup'\r\nimport myFetch from '../../utils/myFetch'\r\nimport OrderContext from '@/context/OrderContext';\r\nimport { STRIPE_PUBLISHED_KEY } from '@/config/globals';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport MyBackdrop from '../../components/MyBackdrop'\r\n\r\nconst stripePromise = loadStripe(STRIPE_PUBLISHED_KEY);\r\n\r\nfunction address() {\r\n\r\n    const { order } = useContext(OrderContext);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleSubmit = async (values)=>{\r\n        setOpen(true)\r\n        if(!values.noExt) values.noExt = 0\r\n        if(!values.noInt) values.noInt = 0\r\n        /*\r\n        if(!values.noExt) values.noExt = 0\r\n        const stripe = await stripePromise;\r\n        const address = await myFetch({method: 'POST', path: `/addresses`, body: values})\r\n        const session = await myFetch({method: 'POST', path: '/orders', body: {order, address: address.id}})\r\n        const result = await stripe.redirectToCheckout({\r\n          sessionId: session.id\r\n        });*/\r\n        console.log(values)\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"xs\">\r\n            <MyBackdrop open={open} />\r\n            <Typography variant=\"h5\" align=\"center\">DIRECCIÓN</Typography>\r\n            <Formik\r\n                initialValues = {{\r\n                    estado: '',\r\n                    delegacion: '',\r\n                    colonia: '',\r\n                    calle: '',\r\n                    noInt: '',\r\n                    noExt: '',\r\n                    cp: '',\r\n                }}\r\n                onSubmit = {(values)=>handleSubmit(values)}\r\n                validationSchema = {\r\n                    Yup.object().shape({\r\n                        estado: Yup.string('Debe ser un texto').required('Debes agregar un estado'),\r\n                        delegacion: Yup.string('Debe ser un texto').required('Debes agregar una delegacion'),\r\n                        colonia: Yup.string('Debe ser un texto').required('Debes agregar una colonia'),\r\n                        calle: Yup.string('Debe ser un texto').required('Debes agregar una calle'),\r\n                        noInt: Yup.number().min(0),\r\n                        noExt: Yup.number('Debe ser un número').min(0),\r\n                        cp: Yup.number('Debe ser un número').min(1, 'Debe ser un C.P. válido').required('Debes agregar un C.P.'),\r\n                    })\r\n                }\r\n                >\r\n                <Form>\r\n                    <MyInput label=\"Estado\" name=\"estado\" />\r\n                    <MyInput label=\"Delegación\" name=\"delegacion\" />\r\n                    <MyInput label=\"Colonia\" name=\"colonia\" />\r\n                    <MyInput label=\"Calle\" name=\"calle\" />\r\n                    <MyInput label=\"No. Interior\" name=\"noInt\" />\r\n                    <MyInput label=\"No. Exterior\" name=\"noExt\" />\r\n                    <MyInput label=\"Código Postal\" name=\"cp\" />\r\n                    <Button fullWidth type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                        SAVE\r\n                    </Button>\r\n                </Form>\r\n            </Formik>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default address\r\n"]},"metadata":{},"sourceType":"module"}