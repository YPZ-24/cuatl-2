{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DELL/Desktop/C/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/DELL/Desktop/C/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/C/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      query getProduct($where: JSON! = { active: true, slug: \\\"\", \"\\\" }) {\\n        products(where: $where) {\\n          id\\n          name\\n          description\\n          media {\\n            mime\\n            url\\n          }\\n          meta_description\\n          meta_title\\n          offers(where: { active: true }) {\\n            id\\n            name\\n            description\\n            discount\\n          }\\n          price\\n          variants(where: {active: true}) {\\n            id\\n            color\\n            pattern\\n            size\\n            stock\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query getProductsPage(\\n        $where: JSON! = {\\n          active: true\\n          \", \"\\n        }\\n      ) {\\n        products(start: \", \", limit: \", \", where: $where) {\\n          id\\n          slug\\n          name\\n          price\\n          offers(where: { active: true }) {\\n            id\\n          }\\n          cover {\\n            alternativeText\\n            url\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\n;\nexport var getProductsPage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apolloClient, filter) {\n    var formatFilters, _yield$apolloClient$q, error, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            formatFilters = function formatFilters() {\n              var formattedFilters = '';\n\n              if (filter.query) {\n                if (filter.query.department) {\n                  formattedFilters += \"\\n          departments: { slug: \\\"\".concat(filter.query.department, \"\\\" }\\n        \");\n                }\n\n                if (filter.query.category) {\n                  formattedFilters += \"\\n          categories: { slug: \\\"\".concat(filter.query.category, \"\\\" }\\n        \");\n                }\n\n                if (filter.query.subcategory) {\n                  formattedFilters += \"\\n          subcategories: { slug: \\\"\".concat(filter.query.subcategory, \"\\\" }\\n        \");\n                }\n              }\n\n              return formattedFilters;\n            };\n\n            _context.next = 3;\n            return apolloClient.query({\n              query: gql(_templateObject(), formatFilters(), filter.start, filter.limit)\n            });\n\n          case 3:\n            _yield$apolloClient$q = _context.sent;\n            error = _yield$apolloClient$q.error;\n            data = _yield$apolloClient$q.data;\n            return _context.abrupt(\"return\", error !== null && error !== void 0 ? error : data.products.filter(function (product) {\n              return product !== null;\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProductsPage(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getProductBySlug = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(apolloClient, slug) {\n    var _yield$apolloClient$q2, error, data, loading;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return apolloClient.query({\n              query: gql(_templateObject2(), slug)\n            });\n\n          case 2:\n            _yield$apolloClient$q2 = _context2.sent;\n            error = _yield$apolloClient$q2.error;\n            data = _yield$apolloClient$q2.data;\n            loading = _yield$apolloClient$q2.loading;\n            return _context2.abrupt(\"return\", error !== null && error !== void 0 ? error : data.products[0]);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getProductBySlug(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/DELL/Desktop/C/cuatl-2/actions/fetch-products.ts"],"names":["gql","getProductsPage","apolloClient","filter","formatFilters","formattedFilters","query","department","category","subcategory","start","limit","error","data","products","product","getProductBySlug","slug","loading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAuBA,GAAvB,QAAyD,gBAAzD;AAQC;AAED,OAAO,IAAMC,eAAe;AAAA,sEAAG,iBAC7BC,YAD6B,EAE7BC,MAF6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIvBC,YAAAA,aAJuB,GAIP,SAAhBA,aAAgB,GAAM;AAC1B,kBAAIC,gBAAgB,GAAG,EAAvB;;AAEA,kBAAIF,MAAM,CAACG,KAAX,EAAkB;AAChB,oBAAIH,MAAM,CAACG,KAAP,CAAaC,UAAjB,EAA6B;AAC3BF,kBAAAA,gBAAgB,iDACUF,MAAM,CAACG,KAAP,CAAaC,UADvB,mBAAhB;AAGD;;AAED,oBAAIJ,MAAM,CAACG,KAAP,CAAaE,QAAjB,EAA2B;AACzBH,kBAAAA,gBAAgB,gDACSF,MAAM,CAACG,KAAP,CAAaE,QADtB,mBAAhB;AAGD;;AAED,oBAAIL,MAAM,CAACG,KAAP,CAAaG,WAAjB,EAA8B;AAC5BJ,kBAAAA,gBAAgB,mDACYF,MAAM,CAACG,KAAP,CAAaG,WADzB,mBAAhB;AAGD;AACF;;AAED,qBAAOJ,gBAAP;AACD,aA5B4B;;AAAA;AAAA,mBA8BCH,YAAY,CAACI,KAAb,CAAmB;AAC/CA,cAAAA,KAAK,EAAEN,GAAF,oBAIGI,aAAa,EAJhB,EAOiBD,MAAM,CAACO,KAPxB,EAOyCP,MAAM,CAACQ,KAPhD;AAD0C,aAAnB,CA9BD;;AAAA;AAAA;AA8BrBC,YAAAA,KA9BqB,yBA8BrBA,KA9BqB;AA8BdC,YAAAA,IA9Bc,yBA8BdA,IA9Bc;AAAA,6CAuDtBD,KAvDsB,aAuDtBA,KAvDsB,cAuDtBA,KAvDsB,GAuDbC,IAAI,CAACC,QAAL,CAAcX,MAAd,CAAqB,UAACY,OAAD;AAAA,qBAAuBA,OAAO,KAAK,IAAnC;AAAA,aAArB,CAvDa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfd,eAAe;AAAA;AAAA;AAAA,GAArB;AA0DP,OAAO,IAAMe,gBAAgB;AAAA,uEAAG,kBAC9Bd,YAD8B,EAE9Be,IAF8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAISf,YAAY,CAACI,KAAb,CAAmB;AACxDA,cAAAA,KAAK,EAAEN,GAAF,qBACuDiB,IADvD;AADmD,aAAnB,CAJT;;AAAA;AAAA;AAItBL,YAAAA,KAJsB,0BAItBA,KAJsB;AAIfC,YAAAA,IAJe,0BAIfA,IAJe;AAITK,YAAAA,OAJS,0BAITA,OAJS;AAAA,8CAoCvBN,KApCuB,aAoCvBA,KApCuB,cAoCvBA,KApCuB,GAoCdC,IAAI,CAACC,QAAL,CAAc,CAAd,CApCc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBE,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import { ApolloClient, gql, NormalizedCacheObject } from '@apollo/client';\r\n\r\nimport IProduct from '@/models/IProduct';\r\n\r\ninterface IPageFilter {\r\n  start: number;\r\n  limit: number;\r\n  query?: any\r\n};\r\n\r\nexport const getProductsPage = async (\r\n  apolloClient: ApolloClient<NormalizedCacheObject>,\r\n  filter: IPageFilter\r\n): Promise<IProduct[]> => {\r\n  const formatFilters = () => {\r\n    let formattedFilters = '';\r\n\r\n    if (filter.query) {\r\n      if (filter.query.department) {\r\n        formattedFilters += `\r\n          departments: { slug: \"${filter.query.department}\" }\r\n        `;\r\n      }\r\n\r\n      if (filter.query.category) {\r\n        formattedFilters += `\r\n          categories: { slug: \"${filter.query.category}\" }\r\n        `;\r\n      }\r\n\r\n      if (filter.query.subcategory) {\r\n        formattedFilters += `\r\n          subcategories: { slug: \"${filter.query.subcategory}\" }\r\n        `;\r\n      }\r\n    }\r\n\r\n    return formattedFilters;\r\n  };\r\n\r\n  const { error, data } = await apolloClient.query({\r\n    query: gql`\r\n      query getProductsPage(\r\n        $where: JSON! = {\r\n          active: true\r\n          ${formatFilters()}\r\n        }\r\n      ) {\r\n        products(start: ${filter.start}, limit: ${filter.limit}, where: $where) {\r\n          id\r\n          slug\r\n          name\r\n          price\r\n          offers(where: { active: true }) {\r\n            id\r\n          }\r\n          cover {\r\n            alternativeText\r\n            url\r\n          }\r\n        }\r\n      }\r\n    `\r\n  });\r\n\r\n  return error ?? data.products.filter((product: IProduct) => product !== null);\r\n};\r\n\r\nexport const getProductBySlug = async (\r\n  apolloClient: ApolloClient<NormalizedCacheObject>,\r\n  slug: string\r\n): Promise<IProduct> => {\r\n  const { error, data, loading } = await apolloClient.query({\r\n    query: gql`\r\n      query getProduct($where: JSON! = { active: true, slug: \"${slug}\" }) {\r\n        products(where: $where) {\r\n          id\r\n          name\r\n          description\r\n          media {\r\n            mime\r\n            url\r\n          }\r\n          meta_description\r\n          meta_title\r\n          offers(where: { active: true }) {\r\n            id\r\n            name\r\n            description\r\n            discount\r\n          }\r\n          price\r\n          variants(where: {active: true}) {\r\n            id\r\n            color\r\n            pattern\r\n            size\r\n            stock\r\n          }\r\n        }\r\n      }\r\n    `\r\n  });\r\n\r\n  return error ?? data.products[0];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}