{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\nimport { getSession } from '@/actions/fetch-sessions';\n//: use this context wherever you want to access the AuthProvider\nvar AuthContext = /*#__PURE__*/createContext(null);\nexport default AuthContext;\nexport { AuthProvider }; //: use this component in the _app.tsx file to share the authentication state\n//: globally\n\nfunction AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var router = useRouter();\n\n  var login = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var session;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!('id_token' in router.query || 'access_token' in router.query)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 3;\n              return getSession(location.search);\n\n            case 3:\n              session = _context.sent;\n              router.replace('/');\n              console.log(\"SSES\");\n              console.log(session);\n              sessionStorage.setItem('session', JSON.stringify(session));\n              setUser(session.user);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function login() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var logout = function logout() {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  var getSessionStorage = function getSessionStorage() {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  var getToken = function getToken() {\n    return getSessionStorage().token;\n  }; //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n\n\n  var useSession = function useSession() {\n    useEffect(function () {\n      var session = getSessionStorage();\n      setUser(session === null || session === void 0 ? void 0 : session.user);\n    }, []);\n  };\n\n  var isUserLoggedIn = function isUserLoggedIn() {\n    return getSessionStorage() ? true : false;\n  };\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      login: login,\n      logout: logout,\n      getToken: getToken,\n      isUserLoggedIn: isUserLoggedIn,\n      useSession: useSession\n    },\n    children: children\n  });\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}