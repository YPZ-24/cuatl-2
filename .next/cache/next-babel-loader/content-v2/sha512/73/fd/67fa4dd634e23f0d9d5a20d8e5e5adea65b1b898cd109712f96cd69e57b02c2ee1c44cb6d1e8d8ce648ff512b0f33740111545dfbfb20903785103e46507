{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\B\\\\cuatl-2\\\\context\\\\AuthContext.tsx\",\n    _s2 = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\nimport { getSession } from '@/actions/fetch-sessions';\n//: use this context wherever you want to access the AuthProvider\nvar AuthContext = /*#__PURE__*/createContext(null);\nexport default AuthContext;\nexport { AuthProvider }; //: use this component in the _app.tsx file to share the authentication state\n//: globally\n\nfunction AuthProvider(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var router = useRouter();\n\n  var login = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var session;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!('id_token' in router.query || 'access_token' in router.query)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 3;\n              return getSession(location.search);\n\n            case 3:\n              session = _context.sent;\n              router.replace('/');\n              console.log(\"SSES\");\n              console.log(session);\n              sessionStorage.setItem('session', JSON.stringify(session));\n              setUser(session.user);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function login() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var logout = function logout() {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  var getSessionStorage = function getSessionStorage() {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  var getToken = function getToken() {\n    return getSessionStorage().token;\n  }; //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n\n\n  var useSession = function useSession() {\n    _s();\n\n    useEffect(function () {\n      var session = getSessionStorage();\n      setUser(session === null || session === void 0 ? void 0 : session.user);\n    }, []);\n  };\n\n  _s(useSession, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  var isUserLoggedIn = function isUserLoggedIn() {\n    return getSessionStorage() ? true : false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: user,\n      login: login,\n      logout: logout,\n      getToken: getToken,\n      isUserLoggedIn: isUserLoggedIn,\n      useSession: useSession\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AuthProvider, \"zefM1Knqb/9oUSAMqz/jv6nTK4c=\", false, function () {\n  return [useRouter];\n});\n\n_c = AuthProvider;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/B/cuatl-2/context/AuthContext.tsx"],"names":["useRouter","createContext","useEffect","useState","getSession","AuthContext","AuthProvider","children","user","setUser","router","login","query","location","search","session","replace","console","log","sessionStorage","setItem","JSON","stringify","logout","removeItem","push","getSessionStorage","parse","getItem","_error","error","message","getToken","token","useSession","isUserLoggedIn"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { createContext, useEffect, useState } from 'react';\r\n\r\nimport { getSession } from '@/actions/fetch-sessions';\r\nimport ISession from '@/models/ISession';\r\nimport IUser from '@/models/IUser';\r\n\r\n//: use this context wherever you want to access the AuthProvider\r\nconst AuthContext = createContext(null);\r\n\r\nexport default AuthContext;\r\nexport { AuthProvider };\r\n\r\n//: use this component in the _app.tsx file to share the authentication state\r\n//: globally\r\nfunction AuthProvider({ children }) {\r\n  const [user, setUser] = useState<IUser>(null);\r\n  const router = useRouter();\r\n\r\n  const login = async (): Promise<void> => {\r\n    if ('id_token' in router.query || 'access_token' in router.query) {\r\n      const session: ISession = await getSession(location.search);\r\n\r\n      router.replace('/');\r\n      console.log(\"SSES\")\r\n      console.log(session)\r\n      sessionStorage.setItem('session', JSON.stringify(session));\r\n      setUser(session.user);\r\n    }\r\n  };\r\n\r\n  const logout = (): void => {\r\n    sessionStorage.removeItem('session');\r\n    setUser(null);\r\n    router.push('/');\r\n  };\r\n\r\n  const getSessionStorage = (): ISession | null => {\r\n    try {\r\n      return JSON.parse(sessionStorage.getItem('session'));\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getToken = (): string | null => {\r\n    return getSessionStorage().token;\r\n  };\r\n\r\n  //: use this custom hook to set the local session into the global state each\r\n  //: time a page is refreshed; use it only on page components\r\n  const useSession = (): void => {\r\n    useEffect(() => {\r\n      const session: ISession = getSessionStorage();\r\n\r\n      setUser(session?.user);\r\n    }, []);\r\n  };\r\n\r\n  const isUserLoggedIn = (): boolean => {\r\n    return getSessionStorage() ? true : false;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user, login, logout, getToken, isUserLoggedIn, useSession\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}