{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"C:/Users/DELL/Desktop/A/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/A/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport MyInput from '../../components/inputs/MyInput';\nimport { Container, Typography, Button } from '@material-ui/core';\nimport * as Yup from 'yup';\nimport myFetch from '../../utils/myFetch';\nimport OrderContext from '@/context/OrderContext';\nimport { STRIPE_PUBLISHED_KEY } from '@/config/globals';\nimport { loadStripe } from '@stripe/stripe-js';\nimport MyBackdrop from '../../components/MyBackdrop';\nimport { useSnackbar } from 'notistack';\nvar stripePromise = loadStripe(STRIPE_PUBLISHED_KEY);\n\nfunction address() {\n  var _useContext = useContext(OrderContext),\n      order = _useContext.order;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useSnackbar = useSnackbar(),\n      enqueueSnackbar = _useSnackbar.enqueueSnackbar;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var stripe, _address, session, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setOpen(true);\n              if (!values.noExt) values.noExt = 0;\n              if (!values.noInt) values.noInt = 0;\n              _context.prev = 3;\n              if (!values.noExt) values.noExt = 0;\n              _context.next = 7;\n              return stripePromise;\n\n            case 7:\n              stripe = _context.sent;\n              _context.next = 10;\n              return myFetch({\n                method: 'POST',\n                path: \"/addresses\",\n                body: values\n              });\n\n            case 10:\n              _address = _context.sent;\n              _context.next = 13;\n              return myFetch({\n                method: 'POST',\n                path: '/orders',\n                body: {\n                  order: order,\n                  address: _address.id\n                }\n              });\n\n            case 13:\n              session = _context.sent;\n              _context.next = 16;\n              return stripe.redirectToCheckout({\n                sessionId: session.id\n              });\n\n            case 16:\n              result = _context.sent;\n              _context.next = 22;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](3);\n              enqueueSnackbar(\"Algo salio mal\");\n\n            case 22:\n              setOpen(false);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxs(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsx(MyBackdrop, {\n      open: open\n    }), /*#__PURE__*/_jsx(Typography, {\n      variant: \"h5\",\n      align: \"center\",\n      children: \"DIRECCI\\xD3N\"\n    }), /*#__PURE__*/_jsx(Formik, {\n      initialValues: {\n        estado: '',\n        delegacion: '',\n        colonia: '',\n        calle: '',\n        noInt: '',\n        noExt: '',\n        cp: ''\n      },\n      onSubmit: function onSubmit(values) {\n        return handleSubmit(values);\n      },\n      validationSchema: Yup.object().shape({\n        estado: Yup.string().required('Debes ingresar un estado'),\n        delegacion: Yup.string().required('Debes ingresar una delegacion'),\n        colonia: Yup.string().required('Debes ingresar una colonia'),\n        calle: Yup.string().required('Debes ingresar una calle'),\n        noInt: Yup.number().typeError('Debe ser un número').min(0, 'Debe ser un no. int. válido'),\n        noExt: Yup.number().typeError('Debe ser un número').min(0, 'Debe ser un no. ext. válido'),\n        cp: Yup.number().typeError('Debe ser un número').min(1, 'Debe ser un C.P. válido').required('Debes agregar un C.P.')\n      }),\n      children: /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(MyInput, {\n          label: \"Estado\",\n          name: \"estado\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Delegaci\\xF3n\",\n          name: \"delegacion\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Colonia\",\n          name: \"colonia\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Calle\",\n          name: \"calle\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"No. Interior\",\n          name: \"noInt\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"No. Exterior\",\n          name: \"noExt\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"C\\xF3digo Postal\",\n          name: \"cp\"\n        }), /*#__PURE__*/_jsx(Button, {\n          fullWidth: true,\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"SAVE\"\n        })]\n      })\n    })]\n  });\n}\n\nexport default address;","map":null,"metadata":{},"sourceType":"module"}