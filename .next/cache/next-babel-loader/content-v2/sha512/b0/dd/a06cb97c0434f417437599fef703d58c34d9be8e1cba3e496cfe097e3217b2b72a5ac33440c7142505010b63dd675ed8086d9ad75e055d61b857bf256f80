{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DELL/Desktop/Cu/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/DELL/Desktop/Cu/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/Cu/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query getDepartments {\\n        departments {\\n          id\\n          slug\\n          name\\n          categories {\\n            id\\n            slug\\n            name\\n            subcategories {\\n              id\\n              slug\\n              name\\n            }\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nexport var getDepartments = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apolloClient) {\n    var _yield$apolloClient$q, error, data, loading;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return apolloClient.query({\n              query: gql(_templateObject())\n            });\n\n          case 2:\n            _yield$apolloClient$q = _context.sent;\n            error = _yield$apolloClient$q.error;\n            data = _yield$apolloClient$q.data;\n            loading = _yield$apolloClient$q.loading;\n            return _context.abrupt(\"return\", error !== null && error !== void 0 ? error : data.departments);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getDepartments(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Cu/cuatl-2/actions/fetch-departments.ts"],"names":["gql","getDepartments","apolloClient","query","error","data","loading","departments"],"mappings":";;;;;;;;;;;;;;AAAA,SAAuBA,GAAvB,QAAyD,gBAAzD;AAIA,OAAO,IAAMC,cAAc;AAAA,sEAAG,iBAC5BC,YAD4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGSA,YAAY,CAACC,KAAb,CAAmB;AACtDA,cAAAA,KAAK,EAAEH,GAAF;AADiD,aAAnB,CAHT;;AAAA;AAAA;AAGtBI,YAAAA,KAHsB,yBAGtBA,KAHsB;AAGfC,YAAAA,IAHe,yBAGfA,IAHe;AAGTC,YAAAA,OAHS,yBAGTA,OAHS;AAAA,6CAyBrBF,KAzBqB,aAyBrBA,KAzBqB,cAyBrBA,KAzBqB,GAyBZC,IAAI,CAACE,WAzBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdN,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import { ApolloClient, gql, NormalizedCacheObject } from '@apollo/client';\r\n\r\nimport IDepartment from '@/models/IDepartment';\r\n\r\nexport const getDepartments = async (\r\n  apolloClient: ApolloClient<NormalizedCacheObject>\r\n): Promise<IDepartment[]> => {\r\n  let { error, data, loading } = await apolloClient.query({\r\n    query: gql`\r\n      query getDepartments {\r\n        departments {\r\n          id\r\n          slug\r\n          name\r\n          categories {\r\n            id\r\n            slug\r\n            name\r\n            subcategories {\r\n              id\r\n              slug\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  });\r\n  \r\n  return error ?? data.departments;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}