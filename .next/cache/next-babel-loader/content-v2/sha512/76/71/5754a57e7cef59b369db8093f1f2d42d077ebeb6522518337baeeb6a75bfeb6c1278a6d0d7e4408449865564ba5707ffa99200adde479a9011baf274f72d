{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * Configuration of the Apollo Client to enable the use of GraphQL.\r\n */\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { API_DOMAIN } from '@/config/globals';\nlet apolloClient;\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: true,\n    // it is true when SSR\n    link: new HttpLink({\n      uri: `${API_DOMAIN}/graphql`\n    }),\n    cache: new InMemoryCache()\n  });\n};\n\nconst initializeApolloClient = (initialState = null) => {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  console.log(_apolloClient); //: initial state of Next.js data fetching methods is hydrated here\n\n  if (initialState) {\n    //: get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); //: restore the cache using the data passed from \"getStaticProps\" or\n    //: \"getServerSideProps\" combined with the existing cache data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } //: for SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; //: create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}; //: use this custom hook in your components to hydrate the state of the Apollo\n//: Client\n\n\nconst useApolloClient = initialState => {\n  const store = useMemo(() => initializeApolloClient(initialState), [initialState]);\n  return store;\n};\n\nexport { initializeApolloClient, useApolloClient };","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/lib/apollo-client.ts"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","API_DOMAIN","apolloClient","createApolloClient","ssrMode","link","uri","cache","initializeApolloClient","initialState","_apolloClient","console","log","existingCache","extract","restore","useApolloClient","store"],"mappings":";;;;;;AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,QAKO,gBALP;AAOA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,IAAIC,YAAJ;;AAEA,MAAMC,kBAAkB,GAAG,MAA2C;AACpE,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AACkB;AACxCC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AAAEO,MAAAA,GAAG,EAAG,GAAEL,UAAW;AAArB,KAAb,CAFgB;AAGtBM,IAAAA,KAAK,EAAE,IAAIP,aAAJ;AAHe,GAAjB,CAAP;AAKD,CAND;;AAQA,MAAMQ,sBAAsB,GAAG,CAACC,YAAiB,GAAG,IAArB,KAAmE;AAAA;;AAChG,QAAMC,aAAa,qBAAGR,YAAH,2DAAmBC,kBAAkB,EAAxD;;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAFgG,CAIhG;;AACA,MAAID,YAAJ,EAAkB;AAChB;AACA,UAAMI,aAAa,GAAGH,aAAa,CAACI,OAAd,EAAtB,CAFgB,CAIhB;AACA;;;AACAJ,IAAAA,aAAa,CAACH,KAAd,CAAoBQ,OAApB,iCAAiCF,aAAjC,GAAmDJ,YAAnD;AACD,GAZ+F,CAchG;;;AACA,YAAmC,OAAOC,aAAP,CAf6D,CAiBhG;;AACA,MAAI,CAACR,YAAL,EAAmBA,YAAY,GAAGQ,aAAf;AAEnB,SAAOA,aAAP;AACD,CArBD,C,CAuBA;AACA;;;AACA,MAAMM,eAAe,GAAIP,YAAD,IAA4D;AAClF,QAAMQ,KAAK,GAAGpB,OAAO,CACnB,MAAMW,sBAAsB,CAACC,YAAD,CADT,EAEnB,CAACA,YAAD,CAFmB,CAArB;AAKA,SAAOQ,KAAP;AACD,CAPD;;AASA,SAAST,sBAAT,EAAiCQ,eAAjC","sourcesContent":["/**\r\n * Configuration of the Apollo Client to enable the use of GraphQL.\r\n */\r\nimport { useMemo } from 'react';\r\nimport {\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache,\r\n  NormalizedCacheObject\r\n} from '@apollo/client';\r\n\r\nimport { API_DOMAIN } from '@/config/globals';\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\nconst createApolloClient = (): ApolloClient<NormalizedCacheObject> => {\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === 'undefined', // it is true when SSR\r\n    link: new HttpLink({ uri: `${API_DOMAIN}/graphql` }),\r\n    cache: new InMemoryCache()\r\n  });\r\n};\r\n\r\nconst initializeApolloClient = (initialState: any = null): ApolloClient<NormalizedCacheObject> => {\r\n  const _apolloClient = apolloClient ?? createApolloClient();\r\n  console.log(_apolloClient)\r\n\r\n  //: initial state of Next.js data fetching methods is hydrated here\r\n  if (initialState) {\r\n    //: get existing cache, loaded during client side data fetching\r\n    const existingCache = _apolloClient.extract();\r\n\r\n    //: restore the cache using the data passed from \"getStaticProps\" or\r\n    //: \"getServerSideProps\" combined with the existing cache data\r\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\r\n  }\r\n\r\n  //: for SSG and SSR always create a new Apollo Client\r\n  if (typeof window === 'undefined') return _apolloClient;\r\n\r\n  //: create the Apollo Client once in the client\r\n  if (!apolloClient) apolloClient = _apolloClient;\r\n\r\n  return _apolloClient;\r\n};\r\n\r\n//: use this custom hook in your components to hydrate the state of the Apollo\r\n//: Client\r\nconst useApolloClient = (initialState: any): ApolloClient<NormalizedCacheObject> => {\r\n  const store = useMemo(\r\n    () => initializeApolloClient(initialState),\r\n    [initialState]\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport { initializeApolloClient, useApolloClient };\r\n"]},"metadata":{},"sourceType":"module"}