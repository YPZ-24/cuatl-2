{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API_DOMAIN } from '@/config/globals';\n\nvar getSessionStorage = function getSessionStorage() {\n  try {\n    return JSON.parse(sessionStorage.getItem('session'));\n  } catch (_error) {\n    console.error(_error.message);\n    return null;\n  }\n};\n\nvar getToken = function getToken() {\n  return getSessionStorage().token;\n};\n\nfunction myFetch(_x) {\n  return _myFetch.apply(this, arguments);\n}\n\nfunction _myFetch() {\n  _myFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var method, path, body, res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            method = _ref.method, path = _ref.path, body = _ref.body;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(API_DOMAIN + path, {\n              method: method,\n              body: JSON.stringify(body),\n              headers: {\n                'Content-type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': \"Bearer \".concat(getToken())\n              }\n            });\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n  return _myFetch.apply(this, arguments);\n}\n\nexport default myFetch;","map":null,"metadata":{},"sourceType":"module"}