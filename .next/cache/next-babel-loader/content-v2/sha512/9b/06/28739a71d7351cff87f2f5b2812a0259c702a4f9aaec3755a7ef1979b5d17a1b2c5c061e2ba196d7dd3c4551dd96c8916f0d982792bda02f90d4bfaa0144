{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext, useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport MyInput from '../../components/inputs/MyInput';\nimport { Container, Typography, Button } from '@material-ui/core';\nimport * as Yup from 'yup';\nimport myFetch from '../../utils/myFetch';\nimport OrderContext from '@/context/OrderContext';\nimport { STRIPE_PUBLISHED_KEY } from '@/config/globals';\nimport { loadStripe } from '@stripe/stripe-js';\nimport MyBackdrop from '../../components/MyBackdrop';\nimport { useSnackbar } from 'notistack';\nconst stripePromise = loadStripe(STRIPE_PUBLISHED_KEY);\n\nfunction address() {\n  const {\n    order\n  } = useContext(OrderContext);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  const handleSubmit = async values => {\n    setOpen(true);\n\n    try {\n      if (!values.noExt) values.noExt = 0;\n      const stripe = await stripePromise;\n      const address = await myFetch({\n        method: 'POST',\n        path: `/addresses`,\n        body: values\n      });\n      const session = await myFetch({\n        method: 'POST',\n        path: '/orders',\n        body: {\n          order,\n          address: address.id\n        }\n      });\n      const result = await stripe.redirectToCheckout({\n        sessionId: session.id\n      });\n    } catch (e) {\n      console.log(e);\n      enqueueSnackbar(\"Algo salio mal\");\n    }\n\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxs(Container, {\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsx(MyBackdrop, {\n      open: open\n    }), /*#__PURE__*/_jsx(Typography, {\n      gutterBottom: true,\n      variant: \"h4\",\n      align: \"center\",\n      children: \"DIRECCI\\xD3N\"\n    }), /*#__PURE__*/_jsx(Formik, {\n      initialValues: {\n        estado: '',\n        delegacion: '',\n        colonia: '',\n        calle: '',\n        noInt: '',\n        noExt: '',\n        cp: ''\n      },\n      onSubmit: values => handleSubmit(values),\n      validationSchema: Yup.object().shape({\n        estado: Yup.string().required('Debes ingresar un estado'),\n        delegacion: Yup.string().required('Debes ingresar una delegacion'),\n        colonia: Yup.string().required('Debes ingresar una colonia'),\n        calle: Yup.string().required('Debes ingresar una calle'),\n        noInt: Yup.string(),\n        noExt: Yup.string(),\n        cp: Yup.number().typeError('Debe ser un número').min(1, 'Debe ser un C.P. válido').required('Debes agregar un C.P.')\n      }),\n      children: /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(MyInput, {\n          label: \"Estado\",\n          name: \"estado\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Delegaci\\xF3n\",\n          name: \"delegacion\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Colonia\",\n          name: \"colonia\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"Calle\",\n          name: \"calle\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"No. Interior\",\n          name: \"noInt\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"No. Exterior\",\n          name: \"noExt\"\n        }), /*#__PURE__*/_jsx(MyInput, {\n          label: \"C\\xF3digo Postal\",\n          name: \"cp\"\n        }), /*#__PURE__*/_jsx(Button, {\n          style: {\n            marginTop: '30px'\n          },\n          fullWidth: true,\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"SAVE\"\n        })]\n      })\n    })]\n  });\n}\n\nexport default address;","map":null,"metadata":{},"sourceType":"module"}