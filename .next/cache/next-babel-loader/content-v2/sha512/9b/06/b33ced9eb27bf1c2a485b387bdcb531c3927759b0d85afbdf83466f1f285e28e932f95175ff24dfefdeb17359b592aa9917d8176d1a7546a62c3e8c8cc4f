{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\context\\\\OrderContext.tsx\";\nimport { createContext, useState, useEffect } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nconst OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider({\n  children\n}) {\n  const {\n    0: order,\n    1: setOrder\n  } = useState();\n\n  const getOrder = () => {\n    try {\n      return JSON.parse(localStorage.getItem('order')) || [];\n    } catch (error) {}\n\n    return [];\n  };\n\n  useEffect(() => {\n    const o = getOrder();\n    console.log(o);\n    setOrder(o);\n  }, []);\n\n  const countProducts = () => {\n    //return order ? order.variants.length : 0;\n    return 0;\n  };\n\n  const saveOrder = activeOrder => {\n    localStorage.setItem('order', JSON.stringify(activeOrder));\n  };\n\n  const addProductToBag = (variantQuantity, product) => {\n    const activeOrder = order; //: if the product and variant is already there\n\n    const indexOfOrderItem = activeOrder.findIndex(orderItem => orderItem.variant.id === product.variant.id);\n\n    if (indexOfOrderItem !== -1) {\n      //: update quantity\n      const currentQuantity = activeOrder[indexOfOrderItem].quantity;\n\n      if (currentQuantity + variantQuantity <= order.variant.stock) {\n        activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\n      }\n    } else {\n      activeOrder.push({\n        product: product.product,\n        variant: product.variant,\n        quantity: variantQuantity,\n        offers: product.offers\n      });\n    }\n\n    setOrder(activeOrder);\n  };\n  /*\r\n    \r\n    const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n    //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n    //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\n\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      order,\n      countProducts,\n      addProductToBag\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/context/OrderContext.tsx"],"names":["createContext","useState","useEffect","OrderContext","OrderProvider","children","order","setOrder","getOrder","JSON","parse","localStorage","getItem","error","o","console","log","countProducts","saveOrder","activeOrder","setItem","stringify","addProductToBag","variantQuantity","product","indexOfOrderItem","findIndex","orderItem","variant","id","currentQuantity","quantity","stock","push","offers"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAKA;AACA,MAAMC,YAAY,gBAAGH,aAAa,CAAC,IAAD,CAAlC;AAEA,eAAeG,YAAf;AAEA,SAASC,aAAT,G,CAEA;AACA;;AACA,SAASA,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AAEnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,EAAlC;;AAEA,QAAMO,QAAQ,GAAG,MAA4B;AAC3C,QAAI;AACF,aAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAApD;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc,CAAG;;AACnB,WAAO,EAAP;AACD,GALD;;AAQAX,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,CAAC,GAAGN,QAAQ,EAAlB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAP,IAAAA,QAAQ,CAACO,CAAD,CAAR;AACD,GAJQ,EAIP,EAJO,CAAT;;AAMA,QAAMG,aAAa,GAAG,MAAc;AAClC;AACA,WAAO,CAAP;AACD,GAHD;;AAKA,QAAMC,SAAS,GAAIC,WAAD,IAAuC;AACvDR,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BX,IAAI,CAACY,SAAL,CAAeF,WAAf,CAA9B;AACD,GAFD;;AAIA,QAAMG,eAAe,GAAG,CAACC,eAAD,EAAyBC,OAAzB,KAAmD;AAEzE,UAAML,WAAW,GAAGb,KAApB,CAFyE,CAI1E;;AACA,UAAMmB,gBAAgB,GAAGN,WAAW,CAACO,SAAZ,CAAuBC,SAAD,IAA8BA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,KAAyBL,OAAO,CAACI,OAAR,CAAgBC,EAA7F,CAAzB;;AAEA,QAAIJ,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;AAC3B;AACA,YAAMK,eAAe,GAAGX,WAAW,CAACM,gBAAD,CAAX,CAA8BM,QAAtD;;AACA,UAAID,eAAe,GAAGP,eAAlB,IAAqCjB,KAAK,CAACsB,OAAN,CAAcI,KAAvD,EAA8D;AAC5Db,QAAAA,WAAW,CAACM,gBAAD,CAAX,CAA8BM,QAA9B,GAAyCD,eAAe,GAAGP,eAA3D;AACD;AACF,KAND,MAMO;AACLJ,MAAAA,WAAW,CAACc,IAAZ,CAAiB;AACfT,QAAAA,OAAO,EAAEA,OAAO,CAACA,OADF;AAEfI,QAAAA,OAAO,EAAEJ,OAAO,CAACI,OAFF;AAGfG,QAAAA,QAAQ,EAAER,eAHK;AAIfW,QAAAA,MAAM,EAAEV,OAAO,CAACU;AAJD,OAAjB;AAMD;;AAEA3B,IAAAA,QAAQ,CAACY,WAAD,CAAR;AACD,GAvBD;AA0BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAME,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEb,MAAAA,KAAF;AAASW,MAAAA,aAAT;AAAwBK,MAAAA;AAAxB,KAA9B;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAAA","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\n\r\nimport IOrder from \"@/models/IOrder\";\r\nimport IPaymentOrder from \"@/models/IPaymentOrder\";\r\n\r\n//: use this context whenever you want to access the OrderProvider\r\nconst OrderContext = createContext(null);\r\n\r\nexport default OrderContext;\r\n\r\nexport { OrderProvider };\r\n\r\n//: use this component in all the other components where you want to access\r\n//: the global state of a user order\r\nfunction OrderProvider({ children }) {\r\n\r\n  const [order, setOrder] = useState<Array<IPaymentOrder>>();\r\n\r\n  const getOrder = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('order')) || [];\r\n    } catch (error) { }\r\n    return [];\r\n  };\r\n\r\n  \r\n  useEffect(()=>{\r\n    const o = getOrder()\r\n    console.log(o)\r\n    setOrder(o)\r\n  },[])\r\n\r\n  const countProducts = (): number => {\r\n    //return order ? order.variants.length : 0;\r\n    return 0\r\n  };\r\n\r\n  const saveOrder = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('order', JSON.stringify(activeOrder));\r\n  };\r\n\r\n  const addProductToBag = (variantQuantity:number, product:IPaymentOrder) => {\r\n\r\n    const activeOrder = order\r\n\r\n   //: if the product and variant is already there\r\n   const indexOfOrderItem = activeOrder.findIndex((orderItem: IPaymentOrder) => orderItem.variant.id === product.variant.id);\r\n\r\n   if (indexOfOrderItem !== -1) {\r\n     //: update quantity\r\n     const currentQuantity = activeOrder[indexOfOrderItem].quantity;\r\n     if (currentQuantity + variantQuantity <= order.variant.stock) {\r\n       activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\r\n     }\r\n   } else {\r\n     activeOrder.push({\r\n       product: product.product,\r\n       variant: product.variant,\r\n       quantity: variantQuantity,\r\n       offers: product.offers\r\n     });\r\n   }\r\n\r\n    setOrder(activeOrder);\r\n  };\r\n\r\n\r\n  /*\r\n\r\n  \r\n\r\n  const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n\r\n  //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n\r\n  //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\r\n\r\n  return (\r\n    <OrderContext.Provider value={{ order, countProducts, addProductToBag }}>\r\n      {children}\r\n    </OrderContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}