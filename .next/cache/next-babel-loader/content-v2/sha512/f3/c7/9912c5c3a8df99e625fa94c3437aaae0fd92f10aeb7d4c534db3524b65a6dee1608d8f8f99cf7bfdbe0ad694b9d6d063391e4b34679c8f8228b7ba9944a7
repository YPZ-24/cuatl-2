{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\components\\\\navbars\\\\Navigationbar.tsx\",\n    _s = $RefreshSig$();\n\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { ArrowLeft } from 'react-feather';\nNavigationbar.propTypes = {\n  referer: PropTypes.string\n};\nNavigationbar.defaultProps = {\n  referer: ''\n};\nvar styles = {\n  tailwind: {\n    pageContainer: \"\\n      bg-bse\\n      flex\\n      flex-nowrap\\n      flex-row\\n      h-16\\n      items-center\\n      justify-between\\n      px-6\\n      relative\\n      shadow\\n      z-50\\n    \",\n    control: \"\\n      flex\\n      flex-nowrap\\n      flex-row\\n      h-full\\n      items-center\\n      justify-center\\n      w-16\\n    \"\n  }\n};\nexport default function Navigationbar(_ref) {\n  _s();\n\n  var _this = this;\n\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      referer = _ref.referer;\n\n  var _useState = useState(null),\n      backButton = _useState[0],\n      setBackButton = _useState[1];\n\n  useEffect(function () {\n    //: Link perform some asynchronous tasks that triggers a warning if the\n    //: component is unmounted before it was mounted (like in the case of hidding\n    //: it as a result of a responsive behaviour). By using a state, we prevent\n    //: this warning and just mount the back button if the component is mounted\n    setBackButton( /*#__PURE__*/_jsxDEV(Link, {\n      href: referer,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        className: styles.tailwind.control,\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.tailwind.pageContainer,\n    children: [backButton, children && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tailwind.control,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Navigationbar, \"8elvtjIuqgx+NscmzuysgPKamHw=\");\n\n_c = Navigationbar;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navigationbar\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/components/navbars/Navigationbar.tsx"],"names":["Link","PropTypes","useEffect","useState","ArrowLeft","Navigationbar","propTypes","referer","string","defaultProps","styles","tailwind","pageContainer","control","children","backButton","setBackButton"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEAC,aAAa,CAACC,SAAd,GAA0B;AACxBC,EAAAA,OAAO,EAAEN,SAAS,CAACO;AADK,CAA1B;AAIAH,aAAa,CAACI,YAAd,GAA6B;AAC3BF,EAAAA,OAAO,EAAE;AADkB,CAA7B;AAIA,IAAMG,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,oLADL;AAeRC,IAAAA,OAAO;AAfC;AADG,CAAf;AA4BA,eAAe,SAASR,aAAT,OAAqD;AAAA;;AAAA;;AAAA,2BAA5BS,QAA4B;AAAA,MAA5BA,QAA4B,8BAAjB,IAAiB;AAAA,MAAXP,OAAW,QAAXA,OAAW;;AAAA,kBAC9BJ,QAAQ,CAAC,IAAD,CADsB;AAAA,MAC3DY,UAD2D;AAAA,MAC/CC,aAD+C;;AAGlEd,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACA;AACA;AACAc,IAAAA,aAAa,eACX,QAAC,IAAD;AAAM,MAAA,IAAI,EAAET,OAAZ;AAAA,6BACE;AAAG,QAAA,SAAS,EAAEG,MAAM,CAACC,QAAP,CAAgBE,OAA9B;AAAA,+BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADW,CAAb;AAOD,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACC,QAAP,CAAgBC,aAAhC;AAAA,eACGG,UADH,EAIID,QAAQ,iBACR;AAAK,MAAA,SAAS,EAAEJ,MAAM,CAACC,QAAP,CAAgBE,OAAhC;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA7BuBT,a;;KAAAA,a;AA6BvB","sourcesContent":["import Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useEffect, useState } from 'react';\r\nimport { ArrowLeft } from 'react-feather';\r\n\r\nNavigationbar.propTypes = {\r\n  referer: PropTypes.string\r\n};\r\n\r\nNavigationbar.defaultProps = {\r\n  referer: ''\r\n};\r\n\r\nconst styles = {\r\n  tailwind: {\r\n    pageContainer: `\r\n      bg-bse\r\n      flex\r\n      flex-nowrap\r\n      flex-row\r\n      h-16\r\n      items-center\r\n      justify-between\r\n      px-6\r\n      relative\r\n      shadow\r\n      z-50\r\n    `,\r\n\r\n    control: `\r\n      flex\r\n      flex-nowrap\r\n      flex-row\r\n      h-full\r\n      items-center\r\n      justify-center\r\n      w-16\r\n    `,\r\n  }\r\n};\r\n\r\nexport default function Navigationbar({ children = null, referer }) {\r\n  const [backButton, setBackButton] = useState(null);\r\n\r\n  useEffect(() => {\r\n    //: Link perform some asynchronous tasks that triggers a warning if the\r\n    //: component is unmounted before it was mounted (like in the case of hidding\r\n    //: it as a result of a responsive behaviour). By using a state, we prevent\r\n    //: this warning and just mount the back button if the component is mounted\r\n    setBackButton(\r\n      <Link href={referer}>\r\n        <a className={styles.tailwind.control}>\r\n          <ArrowLeft />\r\n        </a>\r\n      </Link>\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.tailwind.pageContainer}>\r\n      {backButton}\r\n\r\n      {\r\n        children &&\r\n        <div className={styles.tailwind.control}>\r\n          {children}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}