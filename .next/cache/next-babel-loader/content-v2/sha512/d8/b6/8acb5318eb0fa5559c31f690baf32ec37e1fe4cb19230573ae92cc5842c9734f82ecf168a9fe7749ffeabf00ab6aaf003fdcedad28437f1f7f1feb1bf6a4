{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DELL/Desktop/cuatl-2/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/cuatl-2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { API_DOMAIN } from '@/config/globals';\nimport AuthContext from '@/context/AuthContext';\n\nfunction myFetch(_x) {\n  return _myFetch.apply(this, arguments);\n}\n\nfunction _myFetch() {\n  var _s = $RefreshSig$();\n\n  _myFetch = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var method, path, body, _useContext, getToken, token, res, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            method = _ref.method, path = _ref.path, body = _ref.body;\n            _useContext = useContext(AuthContext), getToken = _useContext.getToken;\n            _context.next = 5;\n            return getToken();\n\n          case 5:\n            token = _context.sent;\n            console.log(\"TOKEEEEN: \" + token);\n            _context.prev = 7;\n            _context.next = 10;\n            return fetch(API_DOMAIN + path, {\n              method: method,\n              body: JSON.stringify(body),\n              headers: {\n                'Content-type': 'application/json',\n                'Accept': 'application/json',\n                'Authorization': \"Bearer \".concat(token)\n              }\n            });\n\n          case 10:\n            res = _context.sent;\n            _context.next = 13;\n            return res.json();\n\n          case 13:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](7);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 17]]);\n  }), \"dcdgv0n7fjrvMCwtneAnMNTWaHQ=\"));\n  return _myFetch.apply(this, arguments);\n}\n\nexport default myFetch;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/utils/myFetch.js"],"names":["API_DOMAIN","AuthContext","myFetch","method","path","body","useContext","getToken","token","console","log","fetch","JSON","stringify","headers","res","json","data"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;SAEeC,O;;;;;;;yEAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAyBC,YAAAA,MAAzB,QAAyBA,MAAzB,EAAiCC,IAAjC,QAAiCA,IAAjC,EAAuCC,IAAvC,QAAuCA,IAAvC;AAAA,0BAEyBC,UAAU,CAACL,WAAD,CAFnC,EAEYM,QAFZ,eAEYA,QAFZ;AAAA;AAAA,mBAGwBA,QAAQ,EAHhC;;AAAA;AAGUC,YAAAA,KAHV;AAIIC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAaF,KAAzB;AAJJ;AAAA;AAAA,mBAS0BG,KAAK,CAACX,UAAU,GAACI,IAAZ,EAAkB;AACzCD,cAAAA,MAAM,EAAEA,MADiC;AAEzCE,cAAAA,IAAI,EAAEO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAFmC;AAGzCS,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAEL,0BAAU,kBAFL;AAGL,kDAA2BN,KAA3B;AAHK;AAHgC,aAAlB,CAT/B;;AAAA;AAScO,YAAAA,GATd;AAAA;AAAA,mBAmBqBA,GAAG,CAACC,IAAJ,EAnBrB;;AAAA;AAmBQC,YAAAA,IAnBR;AAAA,6CAoBeA,IApBf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2BA,eAAef,OAAf","sourcesContent":["import { API_DOMAIN } from '@/config/globals';\r\nimport AuthContext from '@/context/AuthContext';\r\n\r\nasync function myFetch ({method, path, body}){\r\n\r\n    const { getToken } = useContext(AuthContext);\r\n    const token = await getToken();\r\n    console.log(\"TOKEEEEN: \"+token)\r\n\r\n\r\n\r\n    try{\r\n        const res = await fetch(API_DOMAIN+path, {\r\n        method: method,\r\n        body: JSON.stringify(body),\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Accept': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        });\r\n        let data;\r\n        data = await res.json();\r\n        return data;\r\n    }catch(e){\r\n        //e.message = \"Fetch failed\"\r\n        return e\r\n    }\r\n}\r\n\r\nexport default myFetch;"]},"metadata":{},"sourceType":"module"}