{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\context\\\\OrderContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nvar OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      order = _useState[0],\n      setOrder = _useState[1];\n\n  var getOrder = function getOrder() {\n    try {\n      return JSON.parse(localStorage.getItem('order')) || [];\n    } catch (error) {}\n\n    return [];\n  };\n\n  useEffect(function () {\n    var o = getOrder();\n    console.log(o);\n    setOrder(o);\n  }, []);\n\n  var countProducts = function countProducts() {\n    return order ? order.length : 0;\n    return 0;\n  };\n\n  var saveOrder = function saveOrder(order) {\n    localStorage.setItem('order', JSON.stringify(order));\n  };\n\n  var addProductToBag = function addProductToBag(variantQuantity, product) {\n    var activeOrder = order; //: if the product and variant is already there\n\n    var indexOfOrderItem = activeOrder.findIndex(function (orderItem) {\n      return orderItem.variant.id === product.variant.id;\n    });\n\n    if (indexOfOrderItem !== -1) {\n      //: update quantity\n      var currentQuantity = activeOrder[indexOfOrderItem].quantity;\n\n      if (currentQuantity + variantQuantity <= product.variant.stock) {\n        activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\n      }\n    } else {\n      activeOrder.push({\n        product: product.product,\n        variant: product.variant,\n        quantity: variantQuantity,\n        offers: product.offers\n      });\n    }\n\n    setOrder(activeOrder);\n    saveOrder(order);\n  };\n  /*\r\n    \r\n    const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n    //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n    //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\n\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      order: order,\n      countProducts: countProducts,\n      addProductToBag: addProductToBag\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OrderProvider, \"hrssQtolRlHDBpXD0gPXTVjPgsU=\");\n\n_c = OrderProvider;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/context/OrderContext.tsx"],"names":["createContext","useState","useEffect","OrderContext","OrderProvider","children","order","setOrder","getOrder","JSON","parse","localStorage","getItem","error","o","console","log","countProducts","length","saveOrder","setItem","stringify","addProductToBag","variantQuantity","product","activeOrder","indexOfOrderItem","findIndex","orderItem","variant","id","currentQuantity","quantity","stock","push","offers"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAKA;AACA,IAAMC,YAAY,gBAAGH,aAAa,CAAC,IAAD,CAAlC;AAEA,eAAeG,YAAf;AAEA,SAASC,aAAT,G,CAEA;AACA;;AACA,SAASA,aAAT,OAAqC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBAETJ,QAAQ,CAAuB,EAAvB,CAFC;AAAA,MAE5BK,KAF4B;AAAA,MAErBC,QAFqB;;AAInC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAA4B;AAC3C,QAAI;AACF,aAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAApD;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc,CAAG;;AACnB,WAAO,EAAP;AACD,GALD;;AAQAX,EAAAA,SAAS,CAAC,YAAI;AACZ,QAAMY,CAAC,GAAGN,QAAQ,EAAlB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAP,IAAAA,QAAQ,CAACO,CAAD,CAAR;AACD,GAJQ,EAIP,EAJO,CAAT;;AAMA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAc;AAClC,WAAOX,KAAK,GAAGA,KAAK,CAACY,MAAT,GAAkB,CAA9B;AACA,WAAO,CAAP;AACD,GAHD;;AAKA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACb,KAAD,EAAiC;AACjDK,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BX,IAAI,CAACY,SAAL,CAAef,KAAf,CAA9B;AACD,GAFD;;AAIA,MAAMgB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,eAAD,EAAyBC,OAAzB,EAAmD;AAEzE,QAAMC,WAAW,GAAGnB,KAApB,CAFyE,CAI1E;;AACA,QAAMoB,gBAAgB,GAAGD,WAAW,CAACE,SAAZ,CAAsB,UAACC,SAAD;AAAA,aAA8BA,SAAS,CAACC,OAAV,CAAkBC,EAAlB,KAAyBN,OAAO,CAACK,OAAR,CAAgBC,EAAvE;AAAA,KAAtB,CAAzB;;AAEA,QAAIJ,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;AAC3B;AACA,UAAMK,eAAe,GAAGN,WAAW,CAACC,gBAAD,CAAX,CAA8BM,QAAtD;;AACA,UAAID,eAAe,GAAGR,eAAlB,IAAqCC,OAAO,CAACK,OAAR,CAAgBI,KAAzD,EAAgE;AAC9DR,QAAAA,WAAW,CAACC,gBAAD,CAAX,CAA8BM,QAA9B,GAAyCD,eAAe,GAAGR,eAA3D;AACD;AACF,KAND,MAMO;AACLE,MAAAA,WAAW,CAACS,IAAZ,CAAiB;AACfV,QAAAA,OAAO,EAAEA,OAAO,CAACA,OADF;AAEfK,QAAAA,OAAO,EAAEL,OAAO,CAACK,OAFF;AAGfG,QAAAA,QAAQ,EAAET,eAHK;AAIfY,QAAAA,MAAM,EAAEX,OAAO,CAACW;AAJD,OAAjB;AAMD;;AACA5B,IAAAA,QAAQ,CAACkB,WAAD,CAAR;AACAN,IAAAA,SAAS,CAACb,KAAD,CAAT;AACD,GAvBD;AA0BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAME,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAALA,KAAF;AAASW,MAAAA,aAAa,EAAbA,aAAT;AAAwBK,MAAAA,eAAe,EAAfA;AAAxB,KAA9B;AAAA,cACGjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhFQD,a;;KAAAA,a;AAgFR","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\n\r\nimport IOrder from \"@/models/IOrder\";\r\nimport IPaymentOrder from \"@/models/IPaymentOrder\";\r\n\r\n//: use this context whenever you want to access the OrderProvider\r\nconst OrderContext = createContext(null);\r\n\r\nexport default OrderContext;\r\n\r\nexport { OrderProvider };\r\n\r\n//: use this component in all the other components where you want to access\r\n//: the global state of a user order\r\nfunction OrderProvider({ children }) {\r\n\r\n  const [order, setOrder] = useState<Array<IPaymentOrder>>([]);\r\n\r\n  const getOrder = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('order')) || [];\r\n    } catch (error) { }\r\n    return [];\r\n  };\r\n\r\n  \r\n  useEffect(()=>{\r\n    const o = getOrder()\r\n    console.log(o)\r\n    setOrder(o)\r\n  },[])\r\n\r\n  const countProducts = (): number => {\r\n    return order ? order.length : 0;\r\n    return 0\r\n  };\r\n\r\n  const saveOrder = (order: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('order', JSON.stringify(order));\r\n  };\r\n\r\n  const addProductToBag = (variantQuantity:number, product:IPaymentOrder) => {\r\n\r\n    const activeOrder = order\r\n\r\n   //: if the product and variant is already there\r\n   const indexOfOrderItem = activeOrder.findIndex((orderItem: IPaymentOrder) => orderItem.variant.id === product.variant.id);\r\n\r\n   if (indexOfOrderItem !== -1) {\r\n     //: update quantity\r\n     const currentQuantity = activeOrder[indexOfOrderItem].quantity;\r\n     if (currentQuantity + variantQuantity <= product.variant.stock) {\r\n       activeOrder[indexOfOrderItem].quantity = currentQuantity + variantQuantity;\r\n     }\r\n   } else {\r\n     activeOrder.push({\r\n       product: product.product,\r\n       variant: product.variant,\r\n       quantity: variantQuantity,\r\n       offers: product.offers\r\n     });\r\n   }\r\n    setOrder(activeOrder);\r\n    saveOrder(order)\r\n  };\r\n\r\n\r\n  /*\r\n\r\n  \r\n\r\n  const addOrderItem = (item: IPaymentOrder) => {\r\n  };\r\n\r\n  //: use this function to add a new item to the order in local storage\r\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\r\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\r\n  };\r\n\r\n  //: use this function to get the current order object from local storage\r\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\r\n    } catch (_error) {\r\n      console.error((_error as SyntaxError).message);\r\n      return null;\r\n    }\r\n  };*/\r\n\r\n  return (\r\n    <OrderContext.Provider value={{ order, countProducts, addProductToBag }}>\r\n      {children}\r\n    </OrderContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}