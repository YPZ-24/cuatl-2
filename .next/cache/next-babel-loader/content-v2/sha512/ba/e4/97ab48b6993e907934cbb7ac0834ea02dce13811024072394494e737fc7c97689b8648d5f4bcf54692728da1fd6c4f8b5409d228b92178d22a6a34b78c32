{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\nimport { getSession } from '@/actions/fetch-sessions';\n//: use this context wherever you want to access the AuthProvider\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport default AuthContext;\nexport { AuthProvider }; //: use this component in the _app.tsx file to share the authentication state\n//: globally\n\nfunction AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const router = useRouter();\n\n  const login = async () => {\n    if ('id_token' in router.query || 'access_token' in router.query) {\n      const session = await getSession(location.search);\n      router.replace('/');\n      console.log(\"SSES\");\n      console.log(session);\n      sessionStorage.setItem('session', JSON.stringify(session));\n      setUser(session.user);\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  const getSessionStorage = () => {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  const getToken = () => {\n    return getSessionStorage().token;\n  }; //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n\n\n  const useSession = () => {\n    useEffect(() => {\n      const session = getSessionStorage();\n      setUser(session === null || session === void 0 ? void 0 : session.user);\n    }, []);\n  };\n\n  const isUserLoggedIn = () => {\n    return getSessionStorage() ? true : false;\n  };\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      getToken,\n      isUserLoggedIn,\n      useSession\n    },\n    children: children\n  });\n}\n\n;","map":null,"metadata":{},"sourceType":"module"}