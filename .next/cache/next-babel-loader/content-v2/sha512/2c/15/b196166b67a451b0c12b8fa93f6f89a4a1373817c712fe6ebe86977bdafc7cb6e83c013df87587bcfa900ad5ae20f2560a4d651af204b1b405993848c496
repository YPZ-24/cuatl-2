{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl-2\\\\pages\\\\index.tsx\";\nimport { useContext, useEffect, useState } from 'react/index';\nimport { getProductsPage } from '@/actions/fetch-products';\nimport LoadMoreButton from '@/components/buttons/LoadMoreButton';\nimport ProductsGallery from '@/components/galleries/ProductsGallery';\nimport { PAGE_LIMIT } from '@/config/globals';\nimport AuthContext from '@/context/AuthContext';\nimport { initializeApolloClient, useApolloClient } from '@/lib/apollo-client';\nexport default function HomePage({\n  initialProducts\n}) {\n  const {\n    login,\n    useSession\n  } = useContext(AuthContext);\n  const apolloClient = useApolloClient(initialProducts);\n  const [page, setPage] = useState({\n    index: 0,\n    data: initialProducts,\n    previousData: initialProducts\n  });\n\n  const getNewPage = async () => {\n    const newPage = await getProductsPage(apolloClient, {\n      start: page.data.length,\n      limit: PAGE_LIMIT\n    });\n    setPage({\n      index: page.index + 1,\n      data: page.data.concat(newPage),\n      previousData: newPage\n    });\n  };\n\n  useSession();\n  useEffect(() => {\n    const loginUser = async () => {\n      //: login user if the session token is in the route query\n      if (location.search) await login(location.search);\n    };\n\n    loginUser();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProductsGallery, {\n      products: page.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), !page.previousData.length ? /*#__PURE__*/_jsxDEV(LoadMoreButton, {\n      fetcher: getNewPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n;\nexport const getServerSideProps = async () => {\n  const apolloClient = initializeApolloClient();\n  const initialProducts = await getProductsPage(apolloClient, {\n    start: 0,\n    limit: PAGE_LIMIT\n  });\n  return {\n    props: {\n      initialProducts\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/pages/index.tsx"],"names":["useContext","useEffect","useState","getProductsPage","LoadMoreButton","ProductsGallery","PAGE_LIMIT","AuthContext","initializeApolloClient","useApolloClient","HomePage","initialProducts","login","useSession","apolloClient","page","setPage","index","data","previousData","getNewPage","newPage","start","length","limit","concat","loginUser","location","search","getServerSideProps","props"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,aAAhD;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,sBAAT,EAAiCC,eAAjC,QAAwD,qBAAxD;AAKA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAuC;AAEpD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAwBb,UAAU,CAACO,WAAD,CAAxC;AACA,QAAMO,YAAY,GAAGL,eAAe,CAACE,eAAD,CAApC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAQ;AACtCe,IAAAA,KAAK,EAAE,CAD+B;AAEtCC,IAAAA,IAAI,EAAEP,eAFgC;AAGtCQ,IAAAA,YAAY,EAAER;AAHwB,GAAR,CAAhC;;AAMA,QAAMS,UAAU,GAAG,YAAY;AAC7B,UAAMC,OAAmB,GAAG,MAAMlB,eAAe,CAC/CW,YAD+C,EACjC;AAAEQ,MAAAA,KAAK,EAAEP,IAAI,CAACG,IAAL,CAAUK,MAAnB;AAA2BC,MAAAA,KAAK,EAAElB;AAAlC,KADiC,CAAjD;AAIAU,IAAAA,OAAO,CAAC;AACNC,MAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAa,CADd;AAENC,MAAAA,IAAI,EAAEH,IAAI,CAACG,IAAL,CAAUO,MAAV,CAAiBJ,OAAjB,CAFA;AAGNF,MAAAA,YAAY,EAAEE;AAHR,KAAD,CAAP;AAKD,GAVD;;AAYAR,EAAAA,UAAU;AAEVZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,SAAS,GAAG,YAAY;AAC5B;AACA,UAAIC,QAAQ,CAACC,MAAb,EAAqB,MAAMhB,KAAK,CAACe,QAAQ,CAACC,MAAV,CAAX;AACtB,KAHD;;AAKAF,IAAAA,SAAS;AACV,GAPQ,EAON,EAPM,CAAT;AASA,sBACE;AAAA,4BACE,QAAC,eAAD;AAAiB,MAAA,QAAQ,EAAEX,IAAI,CAACG;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAACH,IAAI,CAACI,YAAL,CAAkBI,MAAnB,gBACC,QAAC,cAAD;AACE,MAAA,OAAO,EAAEH;AADX;AAAA;AAAA;AAAA;AAAA,YADD,GAIC,IANJ;AAAA,kBADF;AAWD;AAAA;AAED,OAAO,MAAMS,kBAAsC,GAAG,YAAY;AAChE,QAAMf,YAAY,GAAGN,sBAAsB,EAA3C;AACA,QAAMG,eAAe,GAAG,MAAMR,eAAe,CAACW,YAAD,EAAe;AAC1DQ,IAAAA,KAAK,EAAE,CADmD;AAE1DE,IAAAA,KAAK,EAAElB;AAFmD,GAAf,CAA7C;AAIA,SAAO;AAAEwB,IAAAA,KAAK,EAAE;AAAEnB,MAAAA;AAAF;AAAT,GAAP;AACD,CAPM","sourcesContent":["import { useContext, useEffect, useState } from 'react/index';\r\nimport { getProductsPage } from '@/actions/fetch-products';\r\nimport LoadMoreButton from '@/components/buttons/LoadMoreButton';\r\nimport ProductsGallery from '@/components/galleries/ProductsGallery';\r\nimport { PAGE_LIMIT } from '@/config/globals';\r\nimport AuthContext from '@/context/AuthContext';\r\nimport { initializeApolloClient, useApolloClient } from '@/lib/apollo-client';\r\nimport IPage from '@/models/IPage';\r\nimport IProduct from '@/models/IProduct';\r\nimport { GetServerSideProps } from 'next';\r\n\r\nexport default function HomePage({ initialProducts }) {\r\n\r\n  const { login, useSession } = useContext(AuthContext);\r\n  const apolloClient = useApolloClient(initialProducts);\r\n  const [page, setPage] = useState<IPage>({\r\n    index: 0,\r\n    data: initialProducts,\r\n    previousData: initialProducts\r\n  });\r\n\r\n  const getNewPage = async () => {\r\n    const newPage: IProduct[] = await getProductsPage(\r\n      apolloClient, { start: page.data.length, limit: PAGE_LIMIT }\r\n    );\r\n\r\n    setPage({\r\n      index: page.index + 1,\r\n      data: page.data.concat(newPage),\r\n      previousData: newPage\r\n    });\r\n  };\r\n\r\n  useSession();\r\n\r\n  useEffect(() => {\r\n    const loginUser = async () => {\r\n      //: login user if the session token is in the route query\r\n      if (location.search) await login(location.search);\r\n    };\r\n\r\n    loginUser();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ProductsGallery products={page.data} />\r\n      {!page.previousData.length ? \r\n        <LoadMoreButton\r\n          fetcher={getNewPage}\r\n        />\r\n      : null}\r\n    </>\r\n  );\r\n  \r\n};\r\n\r\nexport const getServerSideProps: GetServerSideProps = async () => {\r\n  const apolloClient = initializeApolloClient();\r\n  const initialProducts = await getProductsPage(apolloClient, {\r\n    start: 0,\r\n    limit: PAGE_LIMIT\r\n  });\r\n  return { props: { initialProducts } };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}