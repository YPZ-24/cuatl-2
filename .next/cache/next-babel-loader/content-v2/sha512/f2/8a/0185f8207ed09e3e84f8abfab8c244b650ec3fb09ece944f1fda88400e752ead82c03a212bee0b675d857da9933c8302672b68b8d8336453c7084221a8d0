{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n; //: use this custom hook to get the viewport size of the screen in order to\n//: execute some code base on screen size\n\nvar useViewport = function useViewport() {\n  _s();\n\n  var _useState = useState({\n    height: 0,\n    width: 0\n  }),\n      viewportSize = _useState[0],\n      setViewportSize = _useState[1];\n\n  useEffect(function () {\n    if (window) {\n      var refreshViewportSize = function refreshViewportSize() {\n        return setViewportSize({\n          height: window.innerHeight,\n          width: window.innerWidth\n        });\n      };\n\n      refreshViewportSize();\n      window.addEventListener('resize', refreshViewportSize);\n      return function () {\n        return window.removeEventListener('resize', refreshViewportSize);\n      };\n    }\n  }, []);\n  return viewportSize;\n};\n\n_s(useViewport, \"08PEbjPsJMBG5rs7AB5xPO7Ks0I=\");\n\nexport default useViewport;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl-2/utils/use-viewport.ts"],"names":["useEffect","useState","useViewport","height","width","viewportSize","setViewportSize","window","refreshViewportSize","innerHeight","innerWidth","addEventListener","removeEventListener"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAKC,C,CAED;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAiB;AAAA;;AAAA,kBACKD,QAAQ,CAAY;AAC1DE,IAAAA,MAAM,EAAE,CADkD;AAC/CC,IAAAA,KAAK,EAAE;AADwC,GAAZ,CADb;AAAA,MAC5BC,YAD4B;AAAA,MACdC,eADc;;AAKnCN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,MAAJ,EAAY;AACV,UAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,eAAYF,eAAe,CAAC;AACtDH,UAAAA,MAAM,EAAEI,MAAM,CAACE,WADuC;AAC1BL,UAAAA,KAAK,EAAEG,MAAM,CAACG;AADY,SAAD,CAA3B;AAAA,OAA5B;;AAIAF,MAAAA,mBAAmB;AACnBD,MAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCH,mBAAlC;AAEA,aAAO;AAAA,eAAMD,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCJ,mBAArC,CAAN;AAAA,OAAP;AACD;AACF,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAOH,YAAP;AACD,CAnBD;;GAAMH,W;;AAqBN,eAAeA,WAAf","sourcesContent":["import { type } from \"os\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface IViewport {\r\n  height: number;\r\n  width: number;\r\n};\r\n\r\n//: use this custom hook to get the viewport size of the screen in order to\r\n//: execute some code base on screen size\r\nconst useViewport = (): IViewport => {\r\n  const [viewportSize, setViewportSize] = useState<IViewport>({\r\n    height: 0, width: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (window) {\r\n      const refreshViewportSize = (): void => setViewportSize({\r\n        height: window.innerHeight, width: window.innerWidth\r\n      });\r\n\r\n      refreshViewportSize();\r\n      window.addEventListener('resize', refreshViewportSize);\r\n\r\n      return () => window.removeEventListener('resize', refreshViewportSize);\r\n    }\r\n  }, []);\r\n\r\n  return viewportSize;\r\n};\r\n\r\nexport default useViewport;\r\n"]},"metadata":{},"sourceType":"module"}