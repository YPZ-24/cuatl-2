{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * Configuration of the Apollo Client to enable the use of GraphQL.\r\n */\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { API_DOMAIN } from '@/config/globals';\nlet apolloClient;\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    link: new HttpLink({\n      uri: `${API_DOMAIN}/graphql`\n    }),\n    cache: new InMemoryCache()\n  });\n};\n\nconst initializeApolloClient = (initialState = null) => {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); //: initial state of Next.js data fetching methods is hydrated here\n\n\n  if (initialState) {\n    //: get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); //: restore the cache using the data passed from \"getStaticProps\" or\n    //: \"getServerSideProps\" combined with the existing cache data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } //: for SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; //: create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}; //: use this custom hook in your components to hydrate the state of the Apollo\n//: Client\n\n\nconst useApolloClient = initialState => {\n  const store = useMemo(() => initializeApolloClient(initialState), [initialState]);\n  return store;\n};\n\nexport { initializeApolloClient, useApolloClient };","map":null,"metadata":{},"sourceType":"module"}