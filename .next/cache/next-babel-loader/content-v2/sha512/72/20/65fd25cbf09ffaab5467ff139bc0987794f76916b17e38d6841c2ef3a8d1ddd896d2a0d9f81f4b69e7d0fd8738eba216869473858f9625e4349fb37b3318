{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/DELL/Desktop/B/cuatl-2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      query getProduct($where: JSON! = { active: true, slug: \\\"\", \"\\\" }) {\\n        products(where: $where) {\\n          id\\n          name\\n          description\\n          media {\\n            mime\\n            url\\n          }\\n          meta_description\\n          meta_title\\n          offers(where: { active: true }) {\\n            id\\n            name\\n            description\\n            discount\\n          }\\n          price\\n          variants(where: {active: true}) {\\n            id\\n            color\\n            pattern\\n            size\\n            stock\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query getProductsPage(\\n        $where: JSON! = {\\n          active: true\\n          \", \"\\n        }\\n      ) {\\n        products(start: \", \", limit: \", \", where: $where) {\\n          id\\n          slug\\n          name\\n          price\\n          offers(where: { active: true }) {\\n            id\\n          }\\n          cover {\\n            alternativeText\\n            url\\n          }\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\n;\nexport var getProductsPage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(apolloClient, filter) {\n    var formatFilters, _yield$apolloClient$q, error, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            formatFilters = function formatFilters() {\n              var formattedFilters = '';\n\n              if (filter.query) {\n                if (filter.query.department) {\n                  formattedFilters += \"\\n          departments: { slug: \\\"\".concat(filter.query.department, \"\\\" }\\n        \");\n                }\n\n                if (filter.query.category) {\n                  formattedFilters += \"\\n          categories: { slug: \\\"\".concat(filter.query.category, \"\\\" }\\n        \");\n                }\n\n                if (filter.query.subcategory) {\n                  formattedFilters += \"\\n          subcategories: { slug: \\\"\".concat(filter.query.subcategory, \"\\\" }\\n        \");\n                }\n              }\n\n              return formattedFilters;\n            };\n\n            _context.next = 3;\n            return apolloClient.query({\n              query: gql(_templateObject(), formatFilters(), filter.start, filter.limit)\n            });\n\n          case 3:\n            _yield$apolloClient$q = _context.sent;\n            error = _yield$apolloClient$q.error;\n            data = _yield$apolloClient$q.data;\n            return _context.abrupt(\"return\", error !== null && error !== void 0 ? error : data.products.filter(function (product) {\n              return product !== null;\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProductsPage(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getProductBySlug = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(apolloClient, slug) {\n    var _yield$apolloClient$q2, error, data, loading;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return apolloClient.query({\n              query: gql(_templateObject2(), slug)\n            });\n\n          case 2:\n            _yield$apolloClient$q2 = _context2.sent;\n            error = _yield$apolloClient$q2.error;\n            data = _yield$apolloClient$q2.data;\n            loading = _yield$apolloClient$q2.loading;\n            return _context2.abrupt(\"return\", error !== null && error !== void 0 ? error : data.products[0]);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getProductBySlug(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}