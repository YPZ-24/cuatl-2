{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Coatl\\\\Coatl\\\\Coatl\\\\front-end\\\\context\\\\OrderContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nvar OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      order = _useState[0],\n      setOrder = _useState[1];\n\n  var countProducts = function countProducts() {\n    return order ? order.variants.length : 0;\n  };\n\n  var addOrderItem = function addOrderItem(item) {}; //: use this function to add a new item to the order in local storage\n\n\n  var setOrderItemInLS = function setOrderItemInLS(activeOrder) {\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\n  }; //: use this function to get the current order object from local storage\n\n\n  var getOrderItemFromLS = function getOrderItemFromLS() {\n    try {\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      order: order,\n      countProducts: countProducts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OrderProvider, \"hwEvYyKnu2xkJYdsINuCtcq3if0=\");\n\n_c = OrderProvider;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Coatl/Coatl/Coatl/front-end/context/OrderContext.tsx"],"names":["createContext","useState","OrderContext","OrderProvider","children","order","setOrder","countProducts","variants","length","addOrderItem","item","setOrderItemInLS","activeOrder","localStorage","setItem","JSON","stringify","getOrderItemFromLS","parse","getItem","_error","console","error","message"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAKA;AACA,IAAMC,YAAY,gBAAGF,aAAa,CAAC,IAAD,CAAlC;AAEA,eAAeE,YAAf;AACA,SAASC,aAAT,G,CAEA;AACA;;AACA,SAASA,aAAT,OAAqC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACTH,QAAQ,CAAS,IAAT,CADC;AAAA,MAC5BI,KAD4B;AAAA,MACrBC,QADqB;;AAGnC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAc;AAClC,WAAOF,KAAK,GAAGA,KAAK,CAACG,QAAN,CAAeC,MAAlB,GAA2B,CAAvC;AACD,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAyB,CAC7C,CADD,CAPmC,CAUnC;;;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD,EAAuC;AAC9DC,IAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeJ,WAAf,CAAnC;AACD,GAFD,CAXmC,CAenC;;;AACA,MAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,GAA4B;AACrD,QAAI;AACF,aAAOF,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,YAArB,CAAX,KAAkD,EAAzD;AACD,KAFD,CAEE,OAAOC,MAAP,EAAe;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAeF,MAAD,CAAwBG,OAAtC;AACA,aAAO,IAAP;AACD;AACF,GAPD;;AASA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEnB,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,aAAa,EAAbA;AAAT,KAA9B;AAAA,cACGH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA9BQD,a;;KAAAA,a;AA8BR","sourcesContent":["import { createContext, useState } from \"react\";\n\nimport IOrder from \"@/models/IOrder\";\nimport IPaymentOrder from \"@/models/IPaymentOrder\";\n\n//: use this context whenever you want to access the OrderProvider\nconst OrderContext = createContext(null);\n\nexport default OrderContext;\nexport { OrderProvider };\n\n//: use this component in all the other components where you want to access\n//: the global state of a user order\nfunction OrderProvider({ children }) {\n  const [order, setOrder] = useState<IOrder>(null);\n\n  const countProducts = (): number => {\n    return order ? order.variants.length : 0;\n  };\n\n  const addOrderItem = (item: IPaymentOrder) => {\n  };\n\n  //: use this function to add a new item to the order in local storage\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\n  };\n\n  //: use this function to get the current order object from local storage\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\n    try {\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\n    } catch (_error) {\n      console.error((_error as SyntaxError).message);\n      return null;\n    }\n  };\n\n  return (\n    <OrderContext.Provider value={{ order, countProducts }}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}