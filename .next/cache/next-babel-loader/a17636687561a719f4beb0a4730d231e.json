{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl\\\\cuatl\\\\front-end\\\\components\\\\navbars\\\\Navigationbar.tsx\";\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { ArrowLeft } from 'react-feather';\nNavigationbar.propTypes = {\n  referer: PropTypes.string\n};\nNavigationbar.defaultProps = {\n  referer: ''\n};\nconst styles = {\n  tailwind: {\n    pageContainer: `\n      bg-bse\n      flex\n      flex-nowrap\n      flex-row\n      h-16\n      items-center\n      justify-between\n      px-6\n      relative\n      shadow\n      z-50\n    `,\n    control: `\n      flex\n      flex-nowrap\n      flex-row\n      h-full\n      items-center\n      justify-center\n      w-16\n    `\n  }\n};\nexport default function Navigationbar({\n  children = null,\n  referer\n}) {\n  const {\n    0: backButton,\n    1: setBackButton\n  } = useState(null);\n  useEffect(() => {\n    //: Link perform some asynchronous tasks that triggers a warning if the\n    //: component is unmounted before it was mounted (like in the case of hidding\n    //: it as a result of a responsive behaviour). By using a state, we prevent\n    //: this warning and just mount the back button if the component is mounted\n    setBackButton( /*#__PURE__*/_jsxDEV(Link, {\n      href: referer,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        className: styles.tailwind.control,\n        children: /*#__PURE__*/_jsxDEV(ArrowLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.tailwind.pageContainer,\n    children: [backButton, children && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tailwind.control,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl/cuatl/front-end/components/navbars/Navigationbar.tsx"],"names":["Link","PropTypes","useEffect","useState","ArrowLeft","Navigationbar","propTypes","referer","string","defaultProps","styles","tailwind","pageContainer","control","children","backButton","setBackButton"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEAC,aAAa,CAACC,SAAd,GAA0B;AACxBC,EAAAA,OAAO,EAAEN,SAAS,CAACO;AADK,CAA1B;AAIAH,aAAa,CAACI,YAAd,GAA6B;AAC3BF,EAAAA,OAAO,EAAE;AADkB,CAA7B;AAIA,MAAMG,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbY;AAeRC,IAAAA,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBY;AADG,CAAf;AA4BA,eAAe,SAASR,aAAT,CAAuB;AAAES,EAAAA,QAAQ,GAAG,IAAb;AAAmBP,EAAAA;AAAnB,CAAvB,EAAqD;AAClE,QAAM;AAAA,OAACQ,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACAc,IAAAA,aAAa,eACX,QAAC,IAAD;AAAM,MAAA,IAAI,EAAET,OAAZ;AAAA,6BACE;AAAG,QAAA,SAAS,EAAEG,MAAM,CAACC,QAAP,CAAgBE,OAA9B;AAAA,+BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADW,CAAb;AAOD,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE;AAAK,IAAA,SAAS,EAAEH,MAAM,CAACC,QAAP,CAAgBC,aAAhC;AAAA,eACGG,UADH,EAIID,QAAQ,iBACR;AAAK,MAAA,SAAS,EAAEJ,MAAM,CAACC,QAAP,CAAgBE,OAAhC;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;AAAA","sourcesContent":["import Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { ArrowLeft } from 'react-feather';\n\nNavigationbar.propTypes = {\n  referer: PropTypes.string\n};\n\nNavigationbar.defaultProps = {\n  referer: ''\n};\n\nconst styles = {\n  tailwind: {\n    pageContainer: `\n      bg-bse\n      flex\n      flex-nowrap\n      flex-row\n      h-16\n      items-center\n      justify-between\n      px-6\n      relative\n      shadow\n      z-50\n    `,\n\n    control: `\n      flex\n      flex-nowrap\n      flex-row\n      h-full\n      items-center\n      justify-center\n      w-16\n    `,\n  }\n};\n\nexport default function Navigationbar({ children = null, referer }) {\n  const [backButton, setBackButton] = useState(null);\n\n  useEffect(() => {\n    //: Link perform some asynchronous tasks that triggers a warning if the\n    //: component is unmounted before it was mounted (like in the case of hidding\n    //: it as a result of a responsive behaviour). By using a state, we prevent\n    //: this warning and just mount the back button if the component is mounted\n    setBackButton(\n      <Link href={referer}>\n        <a className={styles.tailwind.control}>\n          <ArrowLeft />\n        </a>\n      </Link>\n    );\n  }, []);\n\n  return (\n    <div className={styles.tailwind.pageContainer}>\n      {backButton}\n\n      {\n        children &&\n        <div className={styles.tailwind.control}>\n          {children}\n        </div>\n      }\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}