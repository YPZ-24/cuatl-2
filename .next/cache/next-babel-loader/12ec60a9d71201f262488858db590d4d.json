{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Configuration of the Apollo Client to enable the use of GraphQL.\n */\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { API_DOMAIN } from '@/config/globals';\nvar apolloClient;\n\nvar createApolloClient = function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    // it is true when SSR\n    link: new HttpLink({\n      uri: \"\".concat(API_DOMAIN, \"/graphql\")\n    }),\n    cache: new InMemoryCache()\n  });\n};\n\nvar initializeApolloClient = function initializeApolloClient() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); //: initial state of Next.js data fetching methods is hydrated here\n\n\n  if (initialState) {\n    //: get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); //: restore the cache using the data passed from \"getStaticProps\" or\n    //: \"getServerSideProps\" combined with the existing cache data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } //: for SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; //: create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}; //: use this custom hook in your components to hydrate the state of the Apollo\n//: Client\n\n\nvar useApolloClient = function useApolloClient(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApolloClient(initialState);\n  }, [initialState]);\n  return store;\n};\n\n_s(useApolloClient, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");\n\nexport { initializeApolloClient, useApolloClient };","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Coatl/Coatl/front-end/lib/apollo-client.ts"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","API_DOMAIN","apolloClient","createApolloClient","ssrMode","link","uri","cache","initializeApolloClient","initialState","_apolloClient","existingCache","extract","restore","useApolloClient","store"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,aAHF,QAKO,gBALP;AAOA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,IAAIC,YAAJ;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAA2C;AACpE,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,OADe;AACkB;AACxCC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AAAEO,MAAAA,GAAG,YAAKL,UAAL;AAAL,KAAb,CAFgB;AAGtBM,IAAAA,KAAK,EAAE,IAAIP,aAAJ;AAHe,GAAjB,CAAP;AAKD,CAND;;AAQA,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAmE;AAAA;;AAAA,MAAlEC,YAAkE,uEAA9C,IAA8C;;AAChG,MAAMC,aAAa,qBAAGR,YAAH,2DAAmBC,kBAAkB,EAAxD,CADgG,CAGhG;;;AACA,MAAIM,YAAJ,EAAkB;AAChB;AACA,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAIhB;AACA;;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD,GAX+F,CAahG;;;AACA,aAAmC,OAAOC,aAAP,CAd6D,CAgBhG;;AACA,MAAI,CAACR,YAAL,EAAmBA,YAAY,GAAGQ,aAAf;AAEnB,SAAOA,aAAP;AACD,CApBD,C,CAsBA;AACA;;;AACA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACL,YAAD,EAA4D;AAAA;;AAClF,MAAMM,KAAK,GAAGlB,OAAO,CACnB;AAAA,WAAMW,sBAAsB,CAACC,YAAD,CAA5B;AAAA,GADmB,EAEnB,CAACA,YAAD,CAFmB,CAArB;AAKA,SAAOM,KAAP;AACD,CAPD;;GAAMD,e;;AASN,SAASN,sBAAT,EAAiCM,eAAjC","sourcesContent":["/**\n * Configuration of the Apollo Client to enable the use of GraphQL.\n */\nimport { useMemo } from 'react';\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject\n} from '@apollo/client';\n\nimport { API_DOMAIN } from '@/config/globals';\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nconst createApolloClient = (): ApolloClient<NormalizedCacheObject> => {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // it is true when SSR\n    link: new HttpLink({ uri: `${API_DOMAIN}/graphql` }),\n    cache: new InMemoryCache()\n  });\n};\n\nconst initializeApolloClient = (initialState: any = null): ApolloClient<NormalizedCacheObject> => {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  //: initial state of Next.js data fetching methods is hydrated here\n  if (initialState) {\n    //: get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n\n    //: restore the cache using the data passed from \"getStaticProps\" or\n    //: \"getServerSideProps\" combined with the existing cache data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n\n  //: for SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient;\n\n  //: create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n};\n\n//: use this custom hook in your components to hydrate the state of the Apollo\n//: Client\nconst useApolloClient = (initialState: any): ApolloClient<NormalizedCacheObject> => {\n  const store = useMemo(\n    () => initializeApolloClient(initialState),\n    [initialState]\n  );\n\n  return store;\n};\n\nexport { initializeApolloClient, useApolloClient };\n"]},"metadata":{},"sourceType":"module"}