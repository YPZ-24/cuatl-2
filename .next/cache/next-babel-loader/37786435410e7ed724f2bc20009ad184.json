{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\nimport { ArrowLeft } from 'react-feather';\nNavigationbar.defaultProps = {\n  referer: ''\n};\nvar styles = {\n  tailwind: {\n    pageContainer: \"\\n      bg-bse\\n      flex\\n      flex-nowrap\\n      flex-row\\n      h-16\\n      items-center\\n      justify-between\\n      px-6\\n      relative\\n      shadow\\n      z-50\\n    \",\n    control: \"\\n      flex\\n      flex-nowrap\\n      flex-row\\n      h-full\\n      items-center\\n      justify-center\\n      w-16\\n    \"\n  }\n};\nexport default function Navigationbar(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      referer = _ref.referer;\n\n  var _useState = useState(null),\n      backButton = _useState[0],\n      setBackButton = _useState[1];\n\n  useEffect(function () {\n    //: Link perform some asynchronous tasks that triggers a warning if the\n    //: component is unmounted before it was mounted (like in the case of hidding\n    //: it as a result of a responsive behaviour). By using a state, we prevent\n    //: this warning and just mount the back button if the component is mounted\n    setBackButton( /*#__PURE__*/_jsx(Link, {\n      href: referer,\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: styles.tailwind.control,\n        children: /*#__PURE__*/_jsx(ArrowLeft, {})\n      })\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.tailwind.pageContainer,\n    children: [backButton, children && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.tailwind.control,\n      children: children\n    })]\n  });\n}\n;","map":null,"metadata":{},"sourceType":"module"}