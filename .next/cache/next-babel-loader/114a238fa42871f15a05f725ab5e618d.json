{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\cuatl\\\\cuatl\\\\front-end\\\\context\\\\OrderContext.tsx\";\nimport { createContext, useState } from \"react\";\n//: use this context whenever you want to access the OrderProvider\nconst OrderContext = /*#__PURE__*/createContext(null);\nexport default OrderContext;\nexport { OrderProvider }; //: use this component in all the other components where you want to access\n//: the global state of a user order\n\nfunction OrderProvider({\n  children\n}) {\n  const getOrderItemFromLS = () => {\n    try {\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  const {\n    0: order,\n    1: setOrder\n  } = useState(getOrderItemFromLS());\n\n  const countProducts = () => {\n    return order ? order.variants.length : 0;\n  };\n\n  const addOrderItem = item => {}; //: use this function to add a new item to the order in local storage\n\n\n  const setOrderItemInLS = activeOrder => {\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\n  }; //: use this function to get the current order object from local storage\n\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      order,\n      countProducts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/cuatl/cuatl/front-end/context/OrderContext.tsx"],"names":["createContext","useState","OrderContext","OrderProvider","children","getOrderItemFromLS","JSON","parse","localStorage","getItem","_error","console","error","message","order","setOrder","countProducts","variants","length","addOrderItem","item","setOrderItemInLS","activeOrder","setItem","stringify"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAKA;AACA,MAAMC,YAAY,gBAAGF,aAAa,CAAC,IAAD,CAAlC;AAEA,eAAeE,YAAf;AACA,SAASC,aAAT,G,CAEA;AACA;;AACA,SAASA,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAqC;AACnC,QAAMC,kBAAkB,GAAG,MAA4B;AACrD,QAAI;AACF,aAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,KAAkD,EAAzD;AACD,KAFD,CAEE,OAAOC,MAAP,EAAe;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAeF,MAAD,CAAwBG,OAAtC;AACA,aAAO,IAAP;AACD;AACF,GAPD;;AAUA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAASI,kBAAkB,EAA3B,CAAlC;;AAEA,QAAMW,aAAa,GAAG,MAAc;AAClC,WAAOF,KAAK,GAAGA,KAAK,CAACG,QAAN,CAAeC,MAAlB,GAA2B,CAAvC;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAIC,IAAD,IAAyB,CAC7C,CADD,CAjBmC,CAoBnC;;;AACA,QAAMC,gBAAgB,GAAIC,WAAD,IAAuC;AAC9Dd,IAAAA,YAAY,CAACe,OAAb,CAAqB,YAArB,EAAmCjB,IAAI,CAACkB,SAAL,CAAeF,WAAf,CAAnC;AACD,GAFD,CArBmC,CAyBnC;;;AAGA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAER,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAA9B;AAAA,cACGZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAAA","sourcesContent":["import { createContext, useState } from \"react\";\n\nimport IOrder from \"@/models/IOrder\";\nimport IPaymentOrder from \"@/models/IPaymentOrder\";\n\n//: use this context whenever you want to access the OrderProvider\nconst OrderContext = createContext(null);\n\nexport default OrderContext;\nexport { OrderProvider };\n\n//: use this component in all the other components where you want to access\n//: the global state of a user order\nfunction OrderProvider({ children }) {\n  const getOrderItemFromLS = (): Array<IPaymentOrder> => {\n    try {\n      return JSON.parse(localStorage.getItem('orderItems')) || [];\n    } catch (_error) {\n      console.error((_error as SyntaxError).message);\n      return null;\n    }\n  };\n\n  \n  const [order, setOrder] = useState<IOrder>(getOrderItemFromLS());\n\n  const countProducts = (): number => {\n    return order ? order.variants.length : 0;\n  };\n\n  const addOrderItem = (item: IPaymentOrder) => {\n  };\n\n  //: use this function to add a new item to the order in local storage\n  const setOrderItemInLS = (activeOrder: Array<IPaymentOrder>) => {\n    localStorage.setItem('orderItems', JSON.stringify(activeOrder));\n  };\n\n  //: use this function to get the current order object from local storage\n \n\n  return (\n    <OrderContext.Provider value={{ order, countProducts }}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}