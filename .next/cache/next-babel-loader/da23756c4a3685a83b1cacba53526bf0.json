{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Coatl\\\\Coatl\\\\front-end\\\\context\\\\AuthContext.tsx\";\nimport { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\nimport { getSession } from '@/actions/fetch-sessions';\n//: use this context wherever you want to access the AuthProvider\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport default AuthContext;\nexport { AuthProvider }; //: use this component in the _app.tsx file to share the authentication state\n//: globally\n\nfunction AuthProvider({\n  children\n}) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const router = useRouter();\n\n  const login = async () => {\n    if ('id_token' in router.query || 'access_token' in router.query) {\n      const session = await getSession(location.search);\n      router.replace('/');\n      sessionStorage.setItem('session', JSON.stringify(session));\n      setUser(session.user);\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  const getSessionStorage = () => {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error(_error.message);\n      return null;\n    }\n  };\n\n  const getToken = () => {\n    return getSessionStorage().token;\n  }; //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n\n\n  const useSession = () => {\n    useEffect(() => {\n      const session = getSessionStorage();\n      setUser(session === null || session === void 0 ? void 0 : session.user);\n    }, []);\n  };\n\n  const isUserLoggedIn = () => {\n    return getSessionStorage() ? true : false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      getToken,\n      isUserLoggedIn,\n      useSession\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Coatl/Coatl/front-end/context/AuthContext.tsx"],"names":["useRouter","createContext","useEffect","useState","getSession","AuthContext","AuthProvider","children","user","setUser","router","login","query","session","location","search","replace","sessionStorage","setItem","JSON","stringify","logout","removeItem","push","getSessionStorage","parse","getItem","_error","console","error","message","getToken","token","useSession","isUserLoggedIn"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAIA;AACA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,IAAD,CAAjC;AAEA,eAAeI,WAAf;AACA,SAASC,YAAT,G,CAEA;AACA;;AACA,SAASA,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAQ,IAAR,CAAhC;AACA,QAAMO,MAAM,GAAGV,SAAS,EAAxB;;AAEA,QAAMW,KAAK,GAAG,YAA2B;AACvC,QAAI,cAAcD,MAAM,CAACE,KAArB,IAA8B,kBAAkBF,MAAM,CAACE,KAA3D,EAAkE;AAChE,YAAMC,OAAiB,GAAG,MAAMT,UAAU,CAACU,QAAQ,CAACC,MAAV,CAA1C;AAEAL,MAAAA,MAAM,CAACM,OAAP,CAAe,GAAf;AACAC,MAAAA,cAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkCC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAlC;AACAJ,MAAAA,OAAO,CAACI,OAAO,CAACL,IAAT,CAAP;AACD;AACF,GARD;;AAUA,QAAMa,MAAM,GAAG,MAAY;AACzBJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,SAA1B;AACAb,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,IAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,MAAuB;AAC/C,QAAI;AACF,aAAOL,IAAI,CAACM,KAAL,CAAWR,cAAc,CAACS,OAAf,CAAuB,SAAvB,CAAX,CAAP;AACD,KAFD,CAEE,OAAOC,MAAP,EAAe;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAeF,MAAD,CAAwBG,OAAtC;AACA,aAAO,IAAP;AACD;AACF,GAPD;;AASA,QAAMC,QAAQ,GAAG,MAAqB;AACpC,WAAOP,iBAAiB,GAAGQ,KAA3B;AACD,GAFD,CA7BkC,CAiClC;AACA;;;AACA,QAAMC,UAAU,GAAG,MAAY;AAC7B/B,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMW,OAAiB,GAAGW,iBAAiB,EAA3C;AAEAf,MAAAA,OAAO,CAACI,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEL,IAAV,CAAP;AACD,KAJQ,EAIN,EAJM,CAAT;AAKD,GAND;;AAQA,QAAM0B,cAAc,GAAG,MAAe;AACpC,WAAOV,iBAAiB,KAAK,IAAL,GAAY,KAApC;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAC3BhB,MAAAA,IAD2B;AACrBG,MAAAA,KADqB;AACdU,MAAAA,MADc;AACNU,MAAAA,QADM;AACIG,MAAAA,cADJ;AACoBD,MAAAA;AADpB,KAA7B;AAAA,cAGG1B;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAAA","sourcesContent":["import { useRouter } from 'next/router';\nimport { createContext, useEffect, useState } from 'react';\n\nimport { getSession } from '@/actions/fetch-sessions';\nimport ISession from '@/models/ISession';\nimport IUser from '@/models/IUser';\n\n//: use this context wherever you want to access the AuthProvider\nconst AuthContext = createContext(null);\n\nexport default AuthContext;\nexport { AuthProvider };\n\n//: use this component in the _app.tsx file to share the authentication state\n//: globally\nfunction AuthProvider({ children }) {\n  const [user, setUser] = useState<IUser>(null);\n  const router = useRouter();\n\n  const login = async (): Promise<void> => {\n    if ('id_token' in router.query || 'access_token' in router.query) {\n      const session: ISession = await getSession(location.search);\n\n      router.replace('/');\n      sessionStorage.setItem('session', JSON.stringify(session));\n      setUser(session.user);\n    }\n  };\n\n  const logout = (): void => {\n    sessionStorage.removeItem('session');\n    setUser(null);\n    router.push('/');\n  };\n\n  const getSessionStorage = (): ISession | null => {\n    try {\n      return JSON.parse(sessionStorage.getItem('session'));\n    } catch (_error) {\n      console.error((_error as SyntaxError).message);\n      return null;\n    }\n  };\n\n  const getToken = (): string | null => {\n    return getSessionStorage().token;\n  };\n\n  //: use this custom hook to set the local session into the global state each\n  //: time a page is refreshed; use it only on page components\n  const useSession = (): void => {\n    useEffect(() => {\n      const session: ISession = getSessionStorage();\n\n      setUser(session?.user);\n    }, []);\n  };\n\n  const isUserLoggedIn = (): boolean => {\n    return getSessionStorage() ? true : false;\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user, login, logout, getToken, isUserLoggedIn, useSession\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}